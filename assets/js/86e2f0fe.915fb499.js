"use strict";(self.webpackChunkalecol_dev_wiki=self.webpackChunkalecol_dev_wiki||[]).push([[8362],{3905:(e,r,n)=>{n.d(r,{Zo:()=>u,kt:()=>m});var t=n(7294);function s(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){s(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,t,s=function(e,r){if(null==e)return{};var n,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(s[n]=e[n]);return s}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=t.createContext({}),l=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},u=function(e){var r=l(e.components);return t.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=l(n),m=s,v=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?t.createElement(v,i(i({ref:r},u),{},{components:n})):t.createElement(v,i({ref:r},u))}));function m(e,r){var n=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var o=n.length,i=new Array(o);i[0]=d;var a={};for(var c in r)hasOwnProperty.call(r,c)&&(a[c]=r[c]);a.originalType=e,a.mdxType="string"==typeof e?e:s,i[1]=a;for(var l=2;l<o;l++)i[l]=n[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,r,n)=>{n(7294)},5488:(e,r,n)=>{n(7294),n(2389)},5895:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var t=n(3117),s=(n(7294),n(3905));n(5488),n(5162);const o={sidebar_position:1},i="Serveur",a={unversionedId:"Backend_Serveur/Serveur",id:"Backend_Serveur/Serveur",title:"Serveur",description:"server.js",source:"@site/docs/2-Backend_Serveur/Serveur.mdx",sourceDirName:"2-Backend_Serveur",slug:"/Backend_Serveur/Serveur",permalink:"/alecol-dev-wiki/docs/Backend_Serveur/Serveur",draft:!1,editUrl:"https://github.com/gylgyl2000/alecol-dev-wiki/docs/2-Backend_Serveur/Serveur.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"BackendSidebar",next:{title:"src",permalink:"/alecol-dev-wiki/docs/Backend_Serveur/Sources/src"}},c={},l=[{value:"server.js",id:"serverjs",level:2},{value:".env",id:"env",level:2},{value:"config",id:"config",level:2},{value:"db.config.js",id:"dbconfigjs",level:3},{value:"http-common.js",id:"http-commonjs",level:2},{value:"scripts",id:"scripts",level:2},{value:"insertData",id:"insertdata",level:3}],u={toc:l};function p(e){let{components:r,...n}=e;return(0,s.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"serveur"},"Serveur"),(0,s.kt)("h2",{id:"serverjs"},"server.js"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./server.js"',title:'"./server.js"'},'// Express est pour la construction de l\'API Rest\nconst express = require("express");\n// body-parser aide \xe0 analyser la requ\xeate et \xe0 cr\xe9er l\'objet req.body\nconst bodyParser = require("body-parser");\n// cors fournit un middleware Express pour activer CORS avec diverses options\nconst cors = require("cors");\n\n// cr\xe9er une application Express\nconst app = express();\n\nrequire("dotenv").config();\n\nvar corsOptions = {\n    origin: `${process.env.REACT_APP_HOST}:${process.env.REACT_APP_FRONTEND_PORT}`,\n};\n\n// ajouter le middleware cors\napp.use(cors(corsOptions));\n\n// ajouter le middleware bodyparser pour analyser les requ\xeates de type de contenu - application/json\napp.use(bodyParser.json());\n// analyser les requ\xeates de type de contenu - application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// d\xe9finir une route GET simple \xe0 tester\napp.get("/", (req, res) => {\n  res.json({ message: "Bienvenue sur l\'application Alecol" });\n});\n\n// MPD \xc9l\xe8ve\nrequire("./src/routes/alecol.parent.routes")(app);\nrequire("./src/routes/alecol.eleve.routes")(app);\nrequire("./src/routes/alecol.classe.routes")(app);\nrequire("./src/routes/alecol.professeur.routes")(app);\nrequire("./src/routes/alecol.matiere.routes")(app);\n\n// MPD Comp\xe9tences\nrequire("./src/routes/alecol.metacomp.routes")(app);\nrequire("./src/routes/alecol.catcomp.routes")(app);\nrequire("./src/routes/alecol.c_cc_cg.routes")(app);\nrequire("./src/routes/alecol.cg_cs.routes")(app);\n\n// MPD Exercices\nrequire("./src/routes/alecol.papp.routes")(app);\nrequire("./src/routes/alecol.nac.routes")(app);\nrequire("./src/routes/alecol.ac_clnt.routes")(app);\nrequire("./src/routes/alecol.exercice.routes")(app);\nrequire("./src/routes/alecol.Rep_txt.routes")(app);\nrequire("./src/routes/alecol.Rep_Img.routes")(app);\nrequire("./src/routes/alecol.reponse_exos.routes")(app);\nrequire("./src/routes/alecol.reponse_memory.routes")(app);\nrequire("./src/routes/alecol.reponse_paires.routes")(app);\nrequire("./src/routes/alecol.reponse_trous.routes")(app);\nrequire("./src/routes/alecol.reponse_dessin_points.routes")(app);\nrequire("./src/routes/alecol.score_eleves.routes")(app);\nrequire("./src/routes/alecol.type_exo.routes")(app);\nrequire("./src/routes/alecol.param_rep_image.routes")(app);\nrequire("./src/routes/alecol.lesson.routes")(app);\nrequire("./src/routes/alecol.images.routes")(app);\n\n\n// d\xe9finir le port 8082 pour \xe9couter les demandes entrantes\nconst PORT = process.env.REACT_APP_BACKEND_PORT;\napp.listen(PORT, () => {\n    console.log(`Le serveur s\'ex\xe9cute sur le port ${PORT}.`);\n});\n\nconst db = require("./src/models");\nconst insertData = require("./src/scripts/insertData");\n// La synchronisation est \xe0 \xe9viter pour plusieurs raisons :\n// - Primo, c\'est inutile et dangereux, car \xe7a peut effacer les donn\xe9es : seulement si on positionne \xe0 force=true\n// - Deuxio, elle recr\xe9e les tables, mais en ajoutant un S au nom de la table\n// - Tertio, si on veut recr\xe9er les tables, il faut \xeatre tr\xe8s explicite\n// db.sequelize.sync({alter: true}).then(() => {\n// avec aucun param\xe8tre, cela ne cr\xe9e la table que si elle n\'existe pas\ndb.sequelize\n    .sync()\n    .then(() => {\n        console.log("Re-sync db.");\n    })\n    .then(() => {\n        // commenter la ligne suivante apr\xe8s la premi\xe8re insertion de donn\xe9es\n        //insertData.insertDummyData();\n    })\n    .catch((err) => {\n        console.log(err);\n    });\n')),(0,s.kt)("h2",{id:"env"},".env"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="./.env"',title:'"./.env"'},"REACT_APP_HOST=http://localhost\nREACT_APP_FRONTEND_PORT=8083\nREACT_APP_BACKEND_PORT=8082\nPORT=8083\n")),(0,s.kt)("h2",{id:"config"},"config"),(0,s.kt)("h3",{id:"dbconfigjs"},"db.config.js"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/config/db.config.js"',title:'"./src/config/db.config.js"'},'module.exports = {\n    HOST: "localhost",\n    USER: "alecolweb",\n    PORT: "3306",\n    PASSWORD: "2P2xjKVUaB@Bei29",\n    DB: "alecol_db",\n    dialect: "mysql",\n    pool: {\n        max: 5,\n        min: 0,\n        acquire: 30000,\n        idle: 10000\n    }\n};\n')),(0,s.kt)("h2",{id:"http-commonjs"},"http-common.js"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="http-common.js"',title:'"http-common.js"'},'import axios from "axios";\n\nexport default axios.create({\n    baseURL: "http://localhost:8082/api",\n    headers: {\n        "Content-type": "application/json",\n    },\n});\n')),(0,s.kt)("h2",{id:"scripts"},"scripts"),(0,s.kt)("h3",{id:"insertdata"},"insertData"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/scripts/insertData.js"',title:'"./src/scripts/insertData.js"'},'const db = require("../models");\nconst matiereList = require("../Data/Contenu/matiereList");\nconst themeList = require("../Data/Contenu/themeList");\nconst leconList = require("../Data/Contenu/leconList");\nconst exerciceList = require("../Data/Contenu/exerciceList");\nconst questionsList = require("../Data/Contenu/questionList");\nconst reponseList = require("../Data/Contenu/reponseList");\nconst propositionList = require("../Data/Contenu/propositionList");\n\nexports.insertDummyData = () => {\n    matiereList.matiereList.map((matiere) => {\n        db.matiere.create({ id: matiere.id, nom: matiere.name });\n    });\n\n    themeList.themeList.map((theme) => {\n        db.themes.create({\n            id: theme.id,\n            nom: theme.name,\n            matiereId: theme.idMatiere,\n        });\n    });\n\n    leconList.leconList.map((lecon) => {\n        db.lesson.create({\n            id: lecon.id,\n            nom: lecon.nom,\n            description: lecon.description,\n            contenu: "test",\n            themeId: lecon.idTheme,\n        });\n    });\n\n    exerciceList.exerciceList.map((exercice) => {\n        db.exercices.create({\n            id: exercice.id,\n            nom: exercice.name,\n            description: exercice.description,\n            lessonId: exercice.idLesson,\n        });\n    });\n\n    questionsList.questionList.map((question) => {\n        db.questions.create({\n            id: question.id,\n            nom: question.nom,\n            libelle: question.contenu,\n            exerciceId: question.idExercice,\n        });\n    });\n\n    reponseList.reponseList.map((reponse) => {\n        db.reponses.create({\n            id: reponse.id,\n            nom: reponse.nom,\n            libelle: reponse.contenu,\n            qcmruId: reponse.idQuestion,\n        });\n    });\n\n    propositionList.propositionList.map((proposition) => {\n        db.propositions.create({\n            id: proposition.id,\n            contenu: proposition.contenu,\n            qcmruId: proposition.idQuestion,\n        });\n    });\n};\n')))}p.isMDXComponent=!0}}]);