"use strict";(self.webpackChunkalecol_dev_wiki=self.webpackChunkalecol_dev_wiki||[]).push([[3585],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>u});var i=r(7294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,i)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,i,s=function(e,n){if(null==e)return{};var r,i,s={},o=Object.keys(e);for(i=0;i<o.length;i++)r=o[i],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)r=o[i],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=i.createContext({}),t=function(e){var n=i.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},p=function(e){var n=t(e.components);return i.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var r=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),m=t(r),u=s,v=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return r?i.createElement(v,c(c({ref:n},p),{},{components:r})):i.createElement(v,c({ref:n},p))}));function u(e,n){var r=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=r.length,c=new Array(o);c[0]=m;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:s,c[1]=a;for(var t=2;t<o;t++)c[t]=r[t];return i.createElement.apply(null,c)}return i.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5162:(e,n,r)=>{r(7294)},5488:(e,n,r)=>{r(7294),r(2389)},3171:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>t});var i=r(3117),s=(r(7294),r(3905));r(5488),r(5162);const o={sidebar_position:1},c="src",a={unversionedId:"Backend_Serveur/Sources/src",id:"Backend_Serveur/Sources/src",title:"src",description:"Services",source:"@site/docs/2-Backend_Serveur/Sources/src.mdx",sourceDirName:"2-Backend_Serveur/Sources",slug:"/Backend_Serveur/Sources/src",permalink:"/alecol-dev-wiki/docs/Backend_Serveur/Sources/src",draft:!1,editUrl:"https://github.com/gylgyl2000/alecol-dev-wiki/docs/2-Backend_Serveur/Sources/src.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"BackendSidebar",previous:{title:"Serveur",permalink:"/alecol-dev-wiki/docs/Backend_Serveur/Serveur"},next:{title:"Parent",permalink:"/alecol-dev-wiki/docs/Backend_Serveur/Sources/MPD_Eleve/Parent"}},l={},t=[{value:"Services",id:"services",level:2},{value:"index.js",id:"indexjs",level:3},{value:"Mod\xe8les",id:"mod\xe8les",level:2},{value:"index.js",id:"indexjs-1",level:3},{value:"Contr\xf4leurs",id:"contr\xf4leurs",level:2},{value:"Routes",id:"routes",level:2}],p={toc:t};function d(e){let{components:n,...r}=e;return(0,s.kt)("wrapper",(0,i.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"src"},"src"),(0,s.kt)("h2",{id:"services"},"Services"),(0,s.kt)("h3",{id:"indexjs"},"index.js"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/services/index.js"',title:'"./src/services/index.js"'},'// MPD \xc9l\xe8ve\nconst ParentService = require("./alecol.parent.service");\nconst EleveService = require("./alecol.eleve.service");\nconst ClasseService = require("./alecol.classe.service");\nconst ProfesseurService = require("./alecol.professeur.service");\nconst MatiereService = require("./alecol.matiere.service");\n\n// MPD Comp\xe9tences\nconst MetaCompService = require("./alecol.metacomp.service");\nconst CatCompService = require("./alecol.catcomp.service");\nconst CompGenService = require("./alecol.c_cc_cg.service");\nconst CompSpecService = require("./alecol.cg_cs.service");\n\n// MPD Exercices\nconst PAppDataService = require("./alecol.papp.service");\nconst NAcDataService = require("./alecol.nac.service");\nconst ActiviteService = require("./alecol.ac_clnt.service");\nconst ExerciceService = require("./alecol.exercices.service");\nconst ReponsesTxtService = require("./alecol.Rep_txt.service");\nconst ReponsesImgService = require("./alecol.Rep_Img.service");\nconst ReponseExosService = require("./alecol.reponse_exos.service");\nconst ReponseMemoryService = require("./alecol.reponse_memory.service");\nconst ReponsePairesService = require("./alecol.reponse_paires.service");\nconst ReponseTrousService = require("./alecol.reponse_trous.service");\nconst ReponseDessinPointsService = require("./alecol.reponse_dessin_points.service");\nconst ScoreElevesService = require("./alecol.score_eleves.service");\nconst TypeExoService = require("./alecol.type_exo.service");\nconst ParamRepImageService = require("./alecol.param_rep_image.service");\nconst LessonService = require("./alecol.lesson.service");\nconst ImageService = require("./alecol.images.service");\n\nconst Services = {};\n\n// MPD \xc9l\xe8ve\nServices.ParentService = ParentService.default;\nServices.EleveService = EleveService.default;\nServices.ClasseService = ClasseService.default;\nServices.ProfesseurService = ProfesseurService.default;\nServices.MatiereService = MatiereService.default;\n\n// MPD Comp\xe9tences\nServices.MetaCompService = MetaCompService.default;\nServices.CatCompService = CatCompService.default;\nServices.CompGenService = CompGenService.default;\nServices.CompSpecService = CompSpecService.default;\n\n// MPD Exercices\nServices.PAppDataService = PAppDataService.default;\nServices.NAcDataService = NAcDataService.default;\nServices.ActiviteService = ActiviteService.default;\nServices.ExerciceService = ExerciceService.default;\nServices.RepTxtService = ReponsesTxtService.default;\nServices.RepImgService = ReponsesImgService.default;\nServices.ReponseExosService = ReponseExosService.default;\nServices.ReponseMemoryService = ReponseMemoryService.default;\nServices.ReponsePairesService = ReponsePairesService.default;\nServices.ReponseTrousService = ReponseTrousService.default;\nServices.ReponseDessinPointsService = ReponseDessinPointsService.default;\nServices.ScoreElevesService = ScoreElevesService.default;\nServices.TypeExoService = TypeExoService.default;\nServices.ParamRepImageService = ParamRepImageService.default;\nServices.LessonService = LessonService.default;\nServices.ImageService = ImageService.default;\n\nexport default Services;\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"MPD \xc9l\xe8ve")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.parent.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.eleve.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.classe.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.professeur.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.matiere.service"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"MPD Comp\xe9tences")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.metacomp.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.catcomp.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.c_cc_cg.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.cg_cs.service"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"MPD Exercices")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.papp.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.nac.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.ac_clnt.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.exercices.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.Rep_txt.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.Rep_Img.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.reponse_dessin_points.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.reponse_exos.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.reponse_memory.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.reponse_paires.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.reponse_trous.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.score_eleves.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.type_exo.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.param_rep_image.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.lesson.service")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./alecol.images.service"))),(0,s.kt)("h2",{id:"mod\xe8les"},"Mod\xe8les"),(0,s.kt)("h3",{id:"indexjs-1"},"index.js"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/models/index.js"',title:'"./src/models/index.js"'},'const dbConfig = require("../config/db.config.js");\n\nconst Sequelize = require("sequelize");\nconst sequelize = new Sequelize(dbConfig.DB, dbConfig.USER, dbConfig.PASSWORD, {\n    host: dbConfig.HOST,\n    dialect: dbConfig.dialect,\n    operatorsAliases: false,\n    port: dbConfig.PORT,\n    pool: {\n        max: dbConfig.pool.max,\n        min: dbConfig.pool.min,\n        acquire: dbConfig.pool.acquire,\n        idle: dbConfig.pool.idle,\n    },\n    define: {\n        freezeTableName: true,\n        timestamps: false,\n    },\n});\n\nconst db = {};\n\ndb.Sequelize = Sequelize;\ndb.sequelize = sequelize;\nconsole.log("Initialisation de la connexion");\n\n// MPD \xc9l\xe8ve\ndb.parents = require("./parent.model")(sequelize, Sequelize);\ndb.parentHasEnfant = require("./parent_has_enfant.model")(sequelize, Sequelize);\ndb.eleves = require("./eleve.model")(sequelize, Sequelize);\ndb.classes = require("./classe.model")(sequelize, Sequelize);\ndb.professeurs = require("./professeur.model")(sequelize, Sequelize);\ndb.classe_prof = require("./classe_prof.model")(sequelize, Sequelize);\ndb.eleveHasMatiere = require("./eleve_has_matiere.model")(sequelize, Sequelize);\ndb.matieres = require("./matiere.model")(sequelize, Sequelize);\ndb.classe_lesson = require("./classe_lesson.model")(sequelize, Sequelize);\n\n// MPD Comp\xe9tences\ndb.metacomp = require("./metacomp.model")(sequelize, Sequelize);\ndb.catcomp = require("./catcomp.model")(sequelize, Sequelize);\ndb.compgen = require("./c_cc_cg.model")(sequelize, Sequelize);\ndb.dependCompgen = require("./dep_cg.model")(sequelize, Sequelize);\ndb.compspec = require("./cg_cs.model")(sequelize, Sequelize);\n\n// MPD Exercices\ndb.pApp = require("./papp.model")(sequelize, Sequelize);\ndb.nAc = require("./nac.model")(sequelize, Sequelize);\ndb.nAc_pApp = require("./nac_papp.model")(sequelize, Sequelize);\ndb.activiteRequiert_CompSpec = require("./ac_cs.model")(sequelize, Sequelize);\ndb.activite = require("./ac_clnt.model")(sequelize, Sequelize);\ndb.exercices = require("./exercices.model")(sequelize, Sequelize);\ndb.Rep_txt = require("./Rep_txt.model")(sequelize, Sequelize);\ndb.Rep_Img = require("./Rep_Img.model")(sequelize, Sequelize);\ndb.reponse_exos = require("./reponse_exos.model")(sequelize, Sequelize);\ndb.reponse_memory = require("./reponse_memory.model")(sequelize, Sequelize);\ndb.reponse_paires = require("./reponse_paires.model")(sequelize, Sequelize);\ndb.reponse_trous = require("./reponse_trous.model")(sequelize, Sequelize);\ndb.reponse_dessin_points = require("./reponse_dessin_points.model")(sequelize, Sequelize);\ndb.score_eleves = require("./score_eleves.model")(sequelize, Sequelize);\ndb.type_exercice = require("./type_exo.model")(sequelize, Sequelize);\ndb.param_rep_image = require("./param_rep_image.model")(sequelize, Sequelize);\ndb.lessons = require("./lesson.model")(sequelize, Sequelize);\ndb.images = require("./images.model")(sequelize, Sequelize);\n\n/**\n * cr\xe9er des d\xe9pendances entre les mod\xe8les\n */\n\n// parent <=> enfant\ndb.parents.belongsToMany(db.eleves, {through: "parent_has_enfant", foreignKey: "parent_id",});\ndb.eleves.belongsToMany(db.parents, {through: "parent_has_enfant", foreignKey: "eleve_id",});\n\n// classe <=> prof\ndb.classes.belongsToMany(db.professeurs, {through: "classe_prof", foreignKey: "classe_id",});\ndb.professeurs.belongsToMany(db.classes, {through: "classe_prof", foreignKey: "professeur_id",});\n\n// eleve <=> matiere\ndb.eleves.belongsToMany(db.matieres, {through: "eleve_has_matiere", foreignKey: "eleve_id",});\ndb.matieres.belongsToMany(db.eleves, {through: "eleve_has_matiere", foreignKey: "matiere_id",});\n\n// classe <=> lesson\ndb.classes.belongsToMany(db.lessons, {through: "classe_lesson", foreignKey: "classe_id",});\ndb.lessons.belongsToMany(db.classes, {through: "classe_lesson", foreignKey: "lesson_id",});\n\n// natureactiv <=> phaseapp\ndb.pApp.belongsToMany(db.nAc, {through: "nac_papp", foreignKey: "papp_id",});\ndb.nAc.belongsToMany(db.pApp, {through: "nac_papp", foreignKey: "nac_id",});\n\n// activite <=> compspec\ndb.compspec.belongsToMany(db.activite, {through: "ac_cs", foreignKey: "cg_cs_id",});\ndb.activite.belongsToMany(db.compspec, {through: "ac_cs", foreignKey: "ac_clnt_pk_ac_id",});\n\ndb.lessons.belongsToMany(db.eleves, {\n  through: "matiere_eleve",\n  foreignKey: "matiere_id",\n});\n\ndb.lessons.belongsToMany(db.matieres, {\n  through: "matiere_eleve",\n  foreignKey: "eleve_id",\n});\n\ndb.matieres.hasMany(db.metacomp, { foreignKey: "fk_matiere_id" });\ndb.metacomp.belongsTo(db.matieres, { foreignKey: "fk_matiere_id" });\n\n// catcomp => metacomp\ndb.metacomp.hasMany(db.catcomp, { foreignKey: "fk_mc_id" });\ndb.catcomp.belongsTo(db.metacomp, { foreignKey: "fk_mc_id" });\n\n// compgen => catcomp\ndb.catcomp.hasMany(db.compgen, { foreignKey: "fk_catcomp_id" });\ndb.compgen.belongsTo(db.catcomp, { foreignKey: "fk_catcomp_id" });\n\n// compgen => classe\ndb.classes.hasMany(db.compgen, { foreignKey: "Classe_ID" });\ndb.compgen.belongsTo(db.classes, { foreignKey: "Classe_ID" });\n\n// depend_compgen => classe_catcomp_has_compgen S\ndb.compgen.hasMany(db.dependCompgen, { foreignKey: "fk_compgens_id" });\ndb.dependCompgen.belongsTo(db.compgen, { foreignKey: "fk_compgens_id" });\n\n// depend_compgen => classe_catcomp_has_compgen T\ndb.compgen.hasMany(db.dependCompgen, { foreignKey: "fk_compgent_id" });\ndb.dependCompgen.belongsTo(db.compgen, { foreignKey: "fk_compgent_id" });\n\n// compgen_has_compspec => classe_catcomp_has_compgen\ndb.compgen.hasMany(db.compspec, { foreignKey: "fk_compgen_id" });\ndb.compspec.belongsTo(db.compgen, { foreignKey: "fk_compgen_id" });\n\n// activite => classe\ndb.classes.hasMany(db.activite, { foreignKey: "Classe_ID" });\ndb.activite.belongsTo(db.classes, { foreignKey: "Classe_ID" });\n\n// activite => lesson\ndb.lessons.hasMany(db.activite, { foreignKey: "Lesson_ID" });\ndb.activite.belongsTo(db.lessons, { foreignKey: "Lesson_ID" });\n\n// activite => type_exo\ndb.type_exercice.hasMany(db.activite, { foreignKey: "typrep" });\ndb.activite.belongsTo(db.type_exercice, { foreignKey: "typrep" });\n\n// activite => natureactiv\ndb.nAc.hasMany(db.activite, { foreignKey: "nac_id" });\ndb.activite.belongsTo(db.nAc, { foreignKey: "nac_id" });\n\n// exercices => activite\ndb.activite.hasMany(db.exercices, { foreignKey: "fk_activite_id" });\ndb.exercices.belongsTo(db.activite, { foreignKey: "fk_activite_id" });\n\n// Rep_Img => images\ndb.images.hasMany(db.Rep_Img, { foreignKey: "FK_Img_id" });\ndb.Rep_Img.belongsTo(db.images, { foreignKey: "FK_Img_id" });\n\n// reponses_exos => exercices\ndb.exercices.hasMany(db.reponse_exos, { foreignKey: "fk_exo_id" });\ndb.reponse_exos.belongsTo(db.exercices, { foreignKey: "fk_exo_id" });\n\n// reponses_exos => type_exo\ndb.type_exercice.hasMany(db.reponse_exos, { foreignKey: "type_exercice" });\ndb.reponse_exos.belongsTo(db.type_exercice, { foreignKey: "type_exercice" });\n\n// reponses_memory => exercices\ndb.exercices.hasMany(db.reponse_memory, { foreignKey: "FK_Exo_ID" });\ndb.reponse_memory.belongsTo(db.exercices, { foreignKey: "FK_Exo_ID" });\n\n// reponses_paires => exercices\ndb.exercices.hasMany(db.reponse_paires, { foreignKey: "FK_Exo_ID" });\ndb.reponse_paires.belongsTo(db.exercices, { foreignKey: "FK_Exo_ID" });\n\n// reponses_trous => exercices\ndb.exercices.hasMany(db.reponse_trous, { foreignKey: "FK_Exo_ID" });\ndb.reponse_trous.belongsTo(db.exercices, { foreignKey: "FK_Exo_ID" });\n\n// reponses_dessin_points => exercices\ndb.exercices.hasMany(db.reponse_dessin_points, { foreignKey: "FK_Exo_ID" });\ndb.reponse_dessin_points.belongsTo(db.exercices, { foreignKey: "FK_Exo_ID" });\n\n// score_eleves => eleve\ndb.eleves.hasMany(db.score_eleves, { foreignKey: "FK_eleve_id" });\ndb.score_eleves.belongsTo(db.eleves, { foreignKey: "FK_eleve_id" });\n\n// score_eleves => exercices\ndb.exercices.hasMany(db.score_eleves, { foreignKey: "FK_exercices_id" });\ndb.score_eleves.belongsTo(db.exercices, { foreignKey: "FK_exercices_id" });\n\n// param_rep_image => exercices\ndb.exercices.hasMany(db.param_rep_image, { foreignKey: "FK_exercice_id" });\ndb.param_rep_image.belongsTo(db.exercices, { foreignKey: "FK_exercice_id" });\n\n// param_rep_image => images\ndb.images.hasMany(db.param_rep_image, { foreignKey: "FK_image_id" });\ndb.param_rep_image.belongsTo(db.images, { foreignKey: "FK_image_id" });\n\n// param_rep_image => type_exo\ndb.type_exercice.hasMany(db.param_rep_image, { foreignKey: "FK_reponse_id" });\ndb.param_rep_image.belongsTo(db.type_exercice, { foreignKey: "FK_reponse_id" });\n\n// lesson => catcomp\ndb.catcomp.hasMany(db.lessons, { foreignKey: "fk_catcomp_id" });\ndb.lessons.belongsTo(db.catcomp, { foreignKey: "fk_catcomp_id" });\n\nmodule.exports = db;\n')),(0,s.kt)("h2",{id:"contr\xf4leurs"},"Contr\xf4leurs"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./src/controllers/alecol.ac_clnt.controllers.js"))),(0,s.kt)("h2",{id:"routes"},"Routes"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"./src/routes/alecol.ac_clnt.routes.js"))))}d.isMDXComponent=!0}}]);