"use strict";(self.webpackChunkalecol_dev_wiki=self.webpackChunkalecol_dev_wiki||[]).push([[9379],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>m});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function c(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?c(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},c=Object.keys(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var a=t.createContext({}),l=function(e){var n=t.useContext(a),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},u=function(e){var n=l(e.components);return t.createElement(a.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,c=e.originalType,a=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=l(r),m=i,v=p["".concat(a,".").concat(m)]||p[m]||d[m]||c;return r?t.createElement(v,s(s({ref:n},u),{},{components:r})):t.createElement(v,s({ref:n},u))}));function m(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var c=r.length,s=new Array(c);s[0]=p;var o={};for(var a in n)hasOwnProperty.call(n,a)&&(o[a]=n[a]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var l=2;l<c;l++)s[l]=r[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6729:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>c,metadata:()=>o,toc:()=>l});var t=r(3117),i=(r(7294),r(3905));const c={},s="Exercices",o={unversionedId:"Backend_Serveur/Sources/MPD_exercices/Exercices",id:"Backend_Serveur/Sources/MPD_exercices/Exercices",title:"Exercices",description:"Service",source:"@site/docs/2-Backend_Serveur/Sources/3-MPD_exercices/6-Exercices.mdx",sourceDirName:"2-Backend_Serveur/Sources/3-MPD_exercices",slug:"/Backend_Serveur/Sources/MPD_exercices/Exercices",permalink:"/alecol-dev-wiki/docs/Backend_Serveur/Sources/MPD_exercices/Exercices",draft:!1,editUrl:"https://github.com/gylgyl2000/alecol-dev-wiki/docs/2-Backend_Serveur/Sources/3-MPD_exercices/6-Exercices.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"BackendSidebar",previous:{title:"Activit\xe9",permalink:"/alecol-dev-wiki/docs/Backend_Serveur/Sources/MPD_exercices/Activite"},next:{title:"R\xe9ponse texte",permalink:"/alecol-dev-wiki/docs/Backend_Serveur/Sources/MPD_exercices/RepTxt"}},a={},l=[{value:"Service",id:"service",level:2},{value:"Mod\xe8le",id:"mod\xe8le",level:2},{value:"Contr\xf4leur",id:"contr\xf4leur",level:2},{value:"Route",id:"route",level:2}],u={toc:l};function d(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"exercices"},"Exercices"),(0,i.kt)("h2",{id:"service"},"Service"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/services/alecol.exercices.service.js"',title:'"./src/services/alecol.exercices.service.js"'},'import http from "../http-common";\n\nclass ExerciceDataService {\n    getAll() {\n        return http.get("/exercices");\n    }\n\n    get(id) {\n        return http.get(`/exercices/${id}`);\n    }\n\n    findByExoId(pk_exo_id) {\n        return http.get(`/exercices/${pk_exo_id}`);\n    }\n\n    findByActiviteId(fk_activite_id) {\n        return http.get(`/exercices?fk_activite_id=${fk_activite_id}`);\n    }\n\n    findByMatiereName(matiereName) {\n        return http.get(`/exercices?matiereName=${matiereName}`);\n    }\n}\n\nexport default new ExerciceDataService();\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/services/index.js"',title:'"./src/services/index.js"'},'const ExerciceService = require("./alecol.exercices.service");\n...\nconst Services = {};\n...\nServices.ExerciceService = ExerciceService.default;\n...\nexport default Services;\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"mod\xe8le"},"Mod\xe8le"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/models/exercices.model.js"',title:'"./src/models/exercices.model.js"'},'module.exports = (sequelize, Sequelize) => {\n    const Exercice = sequelize.define("exercices", {\n        actif: {\n            type: Sequelize.BOOLEAN,\n        },\n        libelle: {\n            type: Sequelize.STRING,\n        },\n        question: {\n            type: Sequelize.STRING,\n        },\n        nb_possible_rep: {\n            type: Sequelize.INTEGER,\n        },\n        nb_bonnes_rep: {\n            type: Sequelize.INTEGER,\n        },\n        fk_activite_id: {\n            type: Sequelize.STRING,\n            primaryKey: true,\n            references: {\n                model: "activite_clnt",\n                key: "pk_activite_id",\n            },\n        },\n        num_question: {\n            type: Sequelize.INTEGER,\n            primaryKey: true,\n        },\n        pk_exo_id: {\n            type: Sequelize.STRING,\n        },\n        element_id: {\n            type: Sequelize.INTEGER,\n            references: {\n                model: "elements",\n                key: "id",\n            },\n        },\n    });\n\n    return Exercice;\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/models/index.js"',title:'"./src/models/index.js"'},'...\ndb.exercices = require("./exercices.model")(sequelize, Sequelize);\n...\n// exercices => activite\ndb.activite.hasMany(db.exercices, { foreignKey: "fk_activite_id" });\ndb.exercices.belongsTo(db.activite, { foreignKey: "fk_activite_id" });\n...\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"contr\xf4leur"},"Contr\xf4leur"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/controllers/alecol.exercice.controllers.js"',title:'"./src/controllers/alecol.exercice.controllers.js"'},'const db = require("../models");\nconst Exercice = db.exercices;\nconst Activite = db.activite;\nconst Lesson = db.lessons;\nconst CatComp = db.catcomp;\nconst MetaComp = db.metacomp;\nconst Matiere = db.matieres;\nconst Type_Exercice = db.type_exercice;\n\nconst Op = db.Sequelize.Op;\n\n// R\xe9cup\xe9rer tous les exercices de la base de donn\xe9es\nexports.findAll = (req, res) => {\n    const exoid = req.query.pk_exo_id;\n    const activiteid = req.query.fk_activite_id;\n    const matiereName = req.query.matiereName;\n\n    var pkCondition = exoid ? { pk_exo_id: { [Op.eq]: `${exoid}` } } : null;\n    var fkCondition = activiteid\n        ? { fk_activite_id: { [Op.like]: `${activiteid}` } }\n        : null;\n\n    var condition = pkCondition || fkCondition;\n\n    Exercice.findAll({\n        include: [\n            {\n                model: Activite,\n                required: true,\n                include: [\n                    {\n                        model: Type_Exercice,\n                        attributes: ["id", "TypeExo"],\n                        required: true,\n                    },\n                    {\n                        model: Lesson,\n                        required: true,\n                        attributes: ["id"],\n                        include: [\n                            {\n                                model: CatComp,\n                                required: true,\n                                attributes: ["id"],\n                                include: [\n                                    {\n                                        model: MetaComp,\n                                        required: true,\n                                        attributes: ["id"],\n                                        include: [\n                                            {\n                                                model: Matiere,\n                                                required: true,\n                                                attributes: ["id"],\n                                                where: {\n                                                    nom: { [Op.like]: matiereName },\n                                                },\n                                            },\n                                        ],\n                                    },\n                                ],\n                            },\n                        ],\n                    },\n                ],\n            },\n        ],\n    })\n        .then((data) => {\n            res.send(data);\n        })\n        .catch((err) => {\n            res.status(500).send({\n                message:\n                err.message || "Une erreur s\'est produite lors de la r\xe9cup\xe9ration des exercices.",\n            });\n        });\n};\n\n// Trouver un seul exercice avec un identifiant\nexports.findOne = (req, res) => {\n    const id = req.params.id;\n\n    var pkCondition = id ? { pk_exo_id: { [Op.like]: `${id}` } } : null;\n\n    Exercice.findAll({ where: pkCondition })\n        .then((data) => {\n            res.send(data);\n        })\n        .catch((err) => {\n            res.status(500).send({\n                message: "Erreur lors de la r\xe9cup\xe9ration de l\'exercice avec l\'id=" + id,\n            });\n        });\n};\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"route"},"Route"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/routes/alecol.exercice.routes.js"',title:'"./src/routes/alecol.exercice.routes.js"'},'module.exports = app => {\n    const exercices = require("../controllers/alecol.exercice.controllers.js");\n\n    var router = require("express").Router();\n\n    // R\xe9cup\xe9rer tous les exercices\n    router.get("/", exercices.findAll);\n\n    // R\xe9cup\xe9rer un seul exercice avec id\n    router.get("/:id", exercices.findOne);\n\n    app.use(\'/api/exercices\', router);\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="server.js"',title:'"server.js"'},'...\nrequire("./src/routes/alecol.exercice.routes")(app);\n...\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"--\n-- Table structure for table `exercices`\n--\n\nDROP TABLE IF EXISTS `exercices`;\nCREATE TABLE IF NOT EXISTS `exercices` (\n  `fk_activite_id` varchar(24) NOT NULL,\n  `num_question` int(11) NOT NULL,\n  `actif` tinyint(4) NOT NULL,\n  `libelle` varchar(255) NOT NULL,\n  `question` varchar(5000) NOT NULL,\n  `nb_bonnes_rep` int(11) NOT NULL,\n  `nb_possible_rep` int(11) NOT NULL,\n  `pk_exo_id` varchar(100) GENERATED ALWAYS AS (concat(`fk_activite_id`,_utf8'-',`num_question`)) STORED,\n  `element_id` int(11) DEFAULT NULL,\n  PRIMARY KEY (`fk_activite_id`,`num_question`),\n  UNIQUE KEY `PK_Exo_ID` (`pk_exo_id`),\n  KEY `element_idfk` (`element_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n--\n-- Dumping data for table `exercices`\n--\n\nINSERT INTO `exercices` (`fk_activite_id`, `num_question`, `actif`, `libelle`, `question`, `nb_bonnes_rep`, `nb_possible_rep`, `element_id`) VALUES\n('CP-AD1-I-1-R', 1, 1, 'L\\'enfant doit relier les points', 'Relier les points ', 4, 256, 233),\n('CP-AD1-I-3-P', 1, 1, 'L\\'enfant doit lier les \xe9l\xe9ments', 'Lie les \xe9l\xe9ments', 4, 8, 233),\n('CP-CD-F-1-B1', 1, 1, 'L\\'enfant doit compter  (\xe0 voix haute ou mentalement) les \xe9l\xe9ments sur une image (en les pointant du doigt)', 'Sur ce dessin, combien vois-tu d\\'autruches ?', 1, 2, 11),\n('CP-CD-F-1-M', 1, 1, 'L\\'enfant doit compter  (\xe0 voix haute ou mentalement) les \xe9l\xe9ments sur une image (en les pointant du doigt)', 'Associe les cartes faisant correspondre les images avec le nombre correspondant', 4, 8, 233),\n('GSM-OS-I-3-S', 1, 1, 'L\\'enfant doit trier les \xe9l\xe9ments', 'Trie les \xe9l\xe9ments', 4, 8, 233);\n")),(0,i.kt)("p",null,"concat(",(0,i.kt)("inlineCode",{parentName:"p"},"fk_activite_id"),",_utf8mb3\\'-\\',",(0,i.kt)("inlineCode",{parentName:"p"},"num_question"),")"))}d.isMDXComponent=!0}}]);