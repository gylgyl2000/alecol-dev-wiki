"use strict";(self.webpackChunkalecol_dev_wiki=self.webpackChunkalecol_dev_wiki||[]).push([[1698],{3905:(e,r,n)=>{n.d(r,{Zo:()=>p,kt:()=>y});var t=n(7294);function c(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){c(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,c=function(e,r){if(null==e)return{};var n,t,c={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(c[n]=e[n]);return c}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var s=t.createContext({}),a=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},p=function(e){var r=a(e.components);return t.createElement(s.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,c=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=a(n),y=c,T=d["".concat(s,".").concat(y)]||d[y]||u[y]||i;return n?t.createElement(T,o(o({ref:r},p),{},{components:n})):t.createElement(T,o({ref:r},p))}));function y(e,r){var n=arguments,c=r&&r.mdxType;if("string"==typeof e||c){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:c,o[1]=l;for(var a=2;a<i;a++)o[a]=n[a];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9490:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var t=n(3117),c=(n(7294),n(3905));const i={},o="Type exercice",l={unversionedId:"Backend_Serveur/Sources/MPD_exercices/TypeExo",id:"Backend_Serveur/Sources/MPD_exercices/TypeExo",title:"Type exercice",description:"Service",source:"@site/docs/2-Backend_Serveur/Sources/3-MPD_exercices/15-TypeExo.mdx",sourceDirName:"2-Backend_Serveur/Sources/3-MPD_exercices",slug:"/Backend_Serveur/Sources/MPD_exercices/TypeExo",permalink:"/alecol-dev-wiki/docs/Backend_Serveur/Sources/MPD_exercices/TypeExo",draft:!1,editUrl:"https://github.com/gylgyl2000/alecol-dev-wiki/docs/2-Backend_Serveur/Sources/3-MPD_exercices/15-TypeExo.mdx",tags:[],version:"current",sidebarPosition:15,frontMatter:{},sidebar:"BackendSidebar",previous:{title:"Score \xe9l\xe8ves",permalink:"/alecol-dev-wiki/docs/Backend_Serveur/Sources/MPD_exercices/ScoreEleves"},next:{title:"Param\xe8tres r\xe9ponse image",permalink:"/alecol-dev-wiki/docs/Backend_Serveur/Sources/MPD_exercices/ParamRepImage"}},s={},a=[{value:"Service",id:"service",level:2},{value:"Mod\xe8le",id:"mod\xe8le",level:2},{value:"Contr\xf4leur",id:"contr\xf4leur",level:2},{value:"Route",id:"route",level:2}],p={toc:a};function u(e){let{components:r,...n}=e;return(0,c.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"type-exercice"},"Type exercice"),(0,c.kt)("h2",{id:"service"},"Service"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/services/alecol.type_exo.service.js"',title:'"./src/services/alecol.type_exo.service.js"'},'import http from "../http-common";\n\nclass TypeExoDataService {\n    getAll() {\n        return http.get("/typesExercice");\n    }\n\n    get(id) {\n        return http.get(`/typesExercice/${id}`);\n    }\n}\n\nexport default new TypeExoDataService();\n')),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/services/index.js"',title:'"./src/services/index.js"'},'const TypeExoService = require("./alecol.type_exo.service");\n...\nconst Services = {};\n...\nServices.TypeExoService = TypeExoService.default;\n...\nexport default Services;\n')),(0,c.kt)("hr",null),(0,c.kt)("h2",{id:"mod\xe8le"},"Mod\xe8le"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/models/type_exo.model.js"',title:'"./src/models/type_exo.model.js"'},'module.exports = (sequelize, Sequelize) => {\n    const TypeExo = sequelize.define("type_exo", {\n        id: {\n            type: Sequelize.STRING,\n            primaryKey: true,\n        },\n        nom: {\n            type: Sequelize.STRING,\n        },\n        description: {\n            type: Sequelize.STRING,\n        },\n        TypeExo: {\n            type: Sequelize.STRING,\n        },\n    });\n\n    return TypeExo;\n};\n')),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/models/index.js"',title:'"./src/models/index.js"'},'...\ndb.type_exercice = require("./type_exo.model")(sequelize, Sequelize);\n...\n')),(0,c.kt)("hr",null),(0,c.kt)("h2",{id:"contr\xf4leur"},"Contr\xf4leur"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/controllers/alecol.type_exo.controllers.js"',title:'"./src/controllers/alecol.type_exo.controllers.js"'},"const db = require(\"../models\");\nconst Type_Exercice = db.type_exercice;\nconst Op = db.Sequelize.Op;\n\n// R\xe9cup\xe9rer toutes les types d'exercice de la base de donn\xe9es\nexports.findAll = (req, res) => {\n    const typeExerciceId = req.query.id;\n\n    var condition = typeExerciceId\n        ? { qcmruId: { [Op.like]: `${typeExerciceId}` } }\n        : null;\n\n    Type_Exercice.findAll({ where: condition })\n        .then((data) => {\n            res.send(data);\n        })\n        .catch((err) => {\n            res.status(500).send({\n                message:\n                err.message || \"Une erreur s'est produite lors de la r\xe9cup\xe9ration des types d'exercice.\",\n            });\n        });\n};\n\n// Trouver un seul type d'exercice avec un identifiant\nexports.findOne = (req, res) => {\n    const id = req.params.id;\n\n    Type_Exercice.findByPk(id)\n        .then((data) => {\n            res.send(data);\n        })\n        .catch((err) => {\n            res.status(500).send({\n                message: \"Erreur lors de la r\xe9cup\xe9ration du type d'exercice avec l'id=\" + id,\n            });\n        });\n};\n")),(0,c.kt)("hr",null),(0,c.kt)("h2",{id:"route"},"Route"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/routes/alecol.type_exo.routes.js"',title:'"./src/routes/alecol.type_exo.routes.js"'},'module.exports = (app) => {\n    const typeExercice = require("../controllers/alecol.type_exo.controllers");\n\n    var router = require("express").Router();\n\n    // R\xe9cup\xe9rer tous les types d\'exercice\n    router.get("/", typeExercice.findAll);\n\n    // R\xe9cup\xe9rer un seul type d\'exercice avec id\n    router.get("/:id", typeExercice.findOne);\n\n    app.use("/api/type_exercice", router);\n};\n')),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="server.js"',title:'"server.js"'},'...\nrequire("./src/routes/alecol.type_exo.routes")(app);\n...\n')),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-sql"},"-- phpMyAdmin SQL Dump\n-- version 5.1.1\n-- https://www.phpmyadmin.net/\n--\n-- H\xf4te : localhost\n-- G\xe9n\xe9r\xe9 le : jeu. 30 juin 2022 \xe0 15:01\n-- Version du serveur : 8.0.29-0ubuntu0.20.04.3\n-- Version de PHP : 7.4.3\n\nSET SQL_MODE = \"NO_AUTO_VALUE_ON_ZERO\";\nSTART TRANSACTION;\nSET time_zone = \"+00:00\";\n\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;\n/*!40101 SET NAMES utf8mb4 */;\n\n--\n-- Base de donn\xe9es : `alecol_db`\n--\n\n-- --------------------------------------------------------\n\n--\n-- Structure de la table `type_exo`\n--\n\nCREATE TABLE `type_exo` (\n  `id` varchar(5) NOT NULL,\n  `nom` varchar(32) NOT NULL,\n  `description` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8_general_ci NOT NULL,\n  `TypeExo` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8_general_ci NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;\n\n--\n-- D\xe9chargement des donn\xe9es de la table `type_exo`\n--\n\nINSERT INTO `type_exo` (`id`, `nom`, `description`, `TypeExo`) VALUES\n('B', 'Binaire', 'Exercice o\xf9 il faut trouver la b', 'Type_Select'),\n('B1', 'Binaire', 'Exercice o\xf9 il faut trouver la b', 'Type_Select'),\n('B2', 'Binaire', 'Exercice o\xf9 il faut trouver la b', 'Type_Select'),\n('D1', 'Dessin', 'Exercice o\xf9 il faut dessiner lib', 'Type_Dessin_Libre'),\n('D2', 'Dessin', 'Exercice o\xf9 il faut colorier des', ''),\n('D3', 'Dessin', 'Exercice o\xf9 il faut dessiner des', ''),\n('D4', 'Dessin', 'Exercice o\xf9 il faut d\xe9placer des', ''),\n('L', 'Labyrinthe', 'Exercice de labyrinthe', ''),\n('M', 'Memory', 'Un exercice de type Memory', 'Type_Flip'),\n('P', 'Relier les paires', 'Un exercice o\xf9 il faut relier de', 'Type_Link_Gilles'),\n('Q', 'QCM', 'Un exercice de type QCM', 'Type_Select'),\n('Q1', 'QCM', 'Un exercice de type QCM', 'Type_Select'),\n('Q2', 'QCM', 'Un exercice de type QCM (questio', 'Type_Select'),\n('Q3', 'QCM', 'Un exercice de type QCM o\xf9 il fa', 'Type_Select'),\n('R', 'Relier les points', 'Un exercice o\xf9 il faut relier de', 'Type_Dessin_Points'),\n('RT', 'Rep\xe9rage', 'Exercice de rep\xe9rage dans un tab', ''),\n('S', 'S\xe9riation', 'Exercice o\xf9 il faut ordonner les', 'Type_Seriation'),\n('T', 'Exercice \xe0 trous', 'Un exercice \xe0 trous', 'Type_Fill'),\n('T1', 'Exercice \xe0 trous', 'Exercice \xe0 trous', 'Type_Fill_Gilles');\n\n--\n-- Index pour les tables d\xe9charg\xe9es\n--\n\n--\n-- Index pour la table `type_exo`\n--\nALTER TABLE `type_exo`\n  ADD PRIMARY KEY (`id`),\n  ADD UNIQUE KEY `ID` (`id`);\nCOMMIT;\n\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;\n/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;\n/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;\n")))}u.isMDXComponent=!0}}]);