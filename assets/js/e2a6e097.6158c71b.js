"use strict";(self.webpackChunkalecol_dev_wiki=self.webpackChunkalecol_dev_wiki||[]).push([[4948],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=s.createContext({}),c=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},u=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?s.createElement(g,i(i({ref:t},p),{},{components:n})):s.createElement(g,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<a;c++)i[c]=n[c];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5162:(e,t,n)=>{n(7294)},5488:(e,t,n)=>{n(7294),n(2389)},6624:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=n(3117),r=(n(7294),n(3905));n(5488),n(5162);const a={},i="Conception d\xe9taill\xe9e",o={unversionedId:"Documents/Documentation/Conception_detaillee",id:"Documents/Documentation/Conception_detaillee",title:"Conception d\xe9taill\xe9e",description:"Architecture G\xe9n\xe9rale",source:"@site/docs/5-Documents/1-Documentation/Conception_detaillee.mdx",sourceDirName:"5-Documents/1-Documentation",slug:"/Documents/Documentation/Conception_detaillee",permalink:"/alecol-dev-wiki/docs/Documents/Documentation/Conception_detaillee",draft:!1,editUrl:"https://github.com/gylgyl2000/alecol-dev-wiki/docs/5-Documents/1-Documentation/Conception_detaillee.mdx",tags:[],version:"current",frontMatter:{},sidebar:"DocumentsSidebar",next:{title:"Gestion du projet Al\xe9col avec Git",permalink:"/alecol-dev-wiki/docs/Documents/Documentation/Gestion_du_projet_alecol_avec_git"}},l={},c=[{value:"Architecture G\xe9n\xe9rale",id:"architecture-g\xe9n\xe9rale",level:2},{value:"1. Frontend",id:"1-frontend",level:3},{value:"2. Backend",id:"2-backend",level:3},{value:"Gestion d\u2019\xe9tat",id:"gestion-d\xe9tat",level:2},{value:"1. D\xe9finition",id:"1-d\xe9finition",level:3},{value:"2. Difficult\xe9s Rencontr\xe9s et Solutions",id:"2-difficult\xe9s-rencontr\xe9s-et-solutions",level:3},{value:"Les types d\u2019exercices",id:"les-types-dexercices",level:2},{value:"1. Exercice de type \xab s\xe9lection \xbb",id:"1-exercice-de-type--s\xe9lection-",level:3},{value:"2. Exercice de type \xab drag and drop \xbb",id:"2-exercice-de-type--drag-and-drop-",level:3},{value:"3. Exercice de type \xab Memory \xbb",id:"3-exercice-de-type--memory-",level:3},{value:"4. Exercice de type \xab Link \xbb",id:"4-exercice-de-type--link-",level:3},{value:"5. Exercice de type \xab Fill \xbb ou \xab phrases \xe0 trous \xbb",id:"5-exercice-de-type--fill--ou--phrases-\xe0-trous-",level:3},{value:"6. Exercice de type \xab S\xe9riation \xbb",id:"6-exercice-de-type--s\xe9riation-",level:3},{value:"Le design pattern Strategy",id:"le-design-pattern-strategy",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"conception-d\xe9taill\xe9e"},"Conception d\xe9taill\xe9e"),(0,r.kt)("h2",{id:"architecture-g\xe9n\xe9rale"},"Architecture G\xe9n\xe9rale"),(0,r.kt)("p",null,"Le sch\xe9ma suivant repr\xe9sente l\u2019architecture g\xe9n\xe9rale du site ainsi que les diff\xe9rents composants qui le permettent de fonctionner correctement."),(0,r.kt)("figure",null,(0,r.kt)("img",{src:"https://monwikidevweb.la-loutre.fr/img/docs/Alecol/assets/CD-AG01.png",alt:"Figure 1 : Architecture G\xe9n\xe9rale du site"}),(0,r.kt)("figcaption",null,"Figure 1 : Architecture G\xe9n\xe9rale du site")),(0,r.kt)("h3",{id:"1-frontend"},"1. Frontend"),(0,r.kt)("p",null,"Se compose de 3 parties :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Le Router : ReactRouter")," permet de naviguer entre les diff\xe9rentes pages du site."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Les Composants")," : constituent l\u2019aspect visuel du site, ils sont r\xe9partis selon une architecture appel\xe9e \xab atomic design \xbb qui d\xe9compose la page en 3 parties :",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Atoms")," : les composants les plus petits et qui ne d\xe9pendent d\u2019aucun autre composant, par exemple un bouton, un titre\u2026"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Molecules")," : ils se composent d\u2019un ensemble d\u2019Atom, par exemple le header qui se compose de l\u2019Atom Logo et d\u2019une liste de liens."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Organisms")," : sont constitu\xe9s de plusieurs Molecules, par exemple le contenu de l\u2019exercice (liste des cartes) ainsi que la barre qui permet de valider ou\nr\xe9initialiser une question."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Les services")," : chaque service est li\xe9 g\xe9n\xe9ralement \xe0 un Model dont il est li\xe9 indirectement \xe0 une table de la base de donn\xe9es, le r\xf4le du service et d\u2019envoyer\ndes requ\xeates au serveur via Axios (protocole HTTP) et de fournir les donn\xe9es re\xe7ues aux composants qui s\u2019en charge de la visualisation.")),(0,r.kt)("h3",{id:"2-backend"},"2. Backend"),(0,r.kt)("p",null,"Se compose de 3 parties :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Le Router")," : le router intercepte les requ\xeates provenant du frontend et selon la requ\xeate appelle le contr\xf4leur ad\xe9quat pour la traiter et retourner une r\xe9ponse\nqui est envoy\xe9 \xe0 la fin au frontend."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Le contr\xf4leur")," : interroge la base de donn\xe9es \xe0 travers l\u2019ORM et r\xe9cup\xe8re les donn\xe9es, puis les envois au frontend."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ORM")," : c\u2019est la partie qui lie chaque model \xe0 la table correspondante de la base de donn\xe9es.")),(0,r.kt)("h2",{id:"gestion-d\xe9tat"},"Gestion d\u2019\xe9tat"),(0,r.kt)("h3",{id:"1-d\xe9finition"},"1. D\xe9finition"),(0,r.kt)("p",null,"Un \xe9tat est une instance d\u2019un composant React et peut \xeatre d\xe9fini comme un objet d'un ensemble de propri\xe9t\xe9s qui contr\xf4lent le comportement du composant. Autrement\ndit, l'\xe9tat d'un composant est un objet qui contient des informations susceptibles de changer au cours de la dur\xe9e de vie du composant."),(0,r.kt)("h3",{id:"2-difficult\xe9s-rencontr\xe9s-et-solutions"},"2. Difficult\xe9s Rencontr\xe9s et Solutions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"React peut regrouper plusieurs appels de ",(0,r.kt)("inlineCode",{parentName:"li"},"setState()")," dans une mise \xe0 jour unique pour la performance. \xc9tant donn\xe9 que les props et le state peuvent \xeatre mis \xe0\njour de mani\xe8re asynchrone, il ne faut pas faire confiance \xe0 leurs valeurs pour calculer l'\xe9tat suivant.",(0,r.kt)("br",null),"\nUn exemple simple serait d\u2019it\xe9rer sur la liste des mati\xe8res re\xe7ue, et de stocker cette liste dans l\u2019\xe9tat. Dans ce cas, il faut it\xe9rer sur la liste toute en se\nbasant sur l\u2019\xe9tat pr\xe9c\xe9dant pour le mettre \xe0 jour \xe0 chaque fois.",(0,r.kt)("br",null),"\nLa solution est d\u2019utiliser la version surcharg\xe9e du la fonction ",(0,r.kt)("inlineCode",{parentName:"li"},"setState()"),", qui consiste \xe0 passer une fonction \xe0 celle-ci en passant l\u2019\xe9tat pr\xe9c\xe9dant en param\xe8tre."),(0,r.kt)("li",{parentName:"ul"},"Dans certain cas, on peut avoir besoin d\u2019une donn\xe9e consid\xe9r\xe9 comme globale dans plusieurs composants diff\xe9rents.",(0,r.kt)("br",null),"\nComment faire par exemple pour stocker une r\xe9f\xe9rence vers la premi\xe8re carte choisie (exercice memory), et de comparer celle-ci avec la deuxi\xe8me carte choisie.",(0,r.kt)("br",null),"\nUne id\xe9e est d\u2019utiliser ",(0,r.kt)("strong",{parentName:"li"},"Context API")," qui permet de rendre les donn\xe9es globales, dans ce cas une r\xe9f\xe9rence vers la premi\xe8re carte sera stock\xe9e et au moment o\xf9 la\ndeuxi\xe8me carte est choisi on peut la comparer avec la premi\xe8re carte.",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"li"},"Context API")," permet aussi d\u2019\xe9viter ce qu\u2019on appelle le ",(0,r.kt)("strong",{parentName:"li"},"Prop Drilling")," qui est tout simplement le fait de devoir passer une information d\u2019un composant parent \xe0\nun composant enfant en passant par tous les composants entre eux qui n\u2019ont pas besoin de cette information.")),(0,r.kt)("h2",{id:"les-types-dexercices"},"Les types d\u2019exercices"),(0,r.kt)("h3",{id:"1-exercice-de-type--s\xe9lection-"},"1. Exercice de type \xab s\xe9lection \xbb"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",1:!0,className:"language-js",metastring:'title="Code 1 : Proposition de type S\xe9lection - src/Components/atoms/proposition/Proposition.js"',title:'"Code',":":!0,Proposition:!0,de:!0,type:!0,"S\xe9lection":!0,"-":!0,'src/Components/atoms/proposition/Proposition.js"':!0},'    return (\n        <div classeName="proposition__container">\n            <button\n                classeName="reponse__button"\n                onClick={(e) => {\n                    clickHandler(e);\n                }}\n            >\n                <h3>\n                    <strong>{props.proposition}</strong>\n                </h3>\n            </button>\n        </div>\n    );\n')),(0,r.kt)("p",null,"Le clic sur un bouton ex\xe9cute la fonction ",(0,r.kt)("inlineCode",{parentName:"p"},"clickHandler")," qui ajoute la chaine \xab ",(0,r.kt)("inlineCode",{parentName:"p"},"activeChoice")," \xbb \xe0 la liste des classeName du bouton (code 2), ce qui permet de\nr\xe9cup\xe9rer les \xe9l\xe9ments qui contient cette chaine au moment de l\u2019\xe9valuation et les comparer avec la liste des r\xe9ponses juste (code 3)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",2:!0,className:"language-js",metastring:'title="Code 2 : Le bloc ex\xe9cut\xe9 quand un bouton est appuy\xe9 - src/Components/atoms/proposition/Proposition.js"',title:'"Code',":":!0,Le:!0,bloc:!0,"ex\xe9cut\xe9":!0,quand:!0,un:!0,bouton:!0,est:!0,"appuy\xe9":!0,"-":!0,'src/Components/atoms/proposition/Proposition.js"':!0},'const clickHandler = (e) => {\n    if (e.target.classList.contains("activeChoice")) {\n        e.target.classList.remove("activeChoice");\n    } else {\n        e.target.classList.add("activeChoice");\n    }\n};\n')),(0,r.kt)("p",null,"Pour l\u2019\xe9valuation, on v\xe9rifie tout d\u2019abord si le nombre de r\xe9ponses choisi est \xe9gale au nombre de r\xe9ponses juste, si ce n\u2019est pas le cas, on peut dire que l\u2019\xe9l\xe8ve\na \xe9chou\xe9 \xe0 l\u2019exercice."),(0,r.kt)("p",null,"Si le nombre de r\xe9ponses choisi (liste 1) est \xe9gale au nombre de r\xe9ponses juste (liste 2) on v\xe9rifie si chaque \xe9l\xe9ment de la premi\xe8re liste existe dans la deuxi\xe8me\nliste."),(0,r.kt)("p",null,"Le tableau ",(0,r.kt)("inlineCode",{parentName:"p"},"arr")," contient les \xe9l\xe9ments s\xe9lectionn\xe9s par l\u2019utilisateur, celui-ci est compar\xe9 avec les r\xe9ponses justes stock\xe9es dans le tableau ",(0,r.kt)("inlineCode",{parentName:"p"},"reponses")," (ligne 23)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",3:!0,className:"language-js",metastring:'title="Code 3 : fonction d\'\xe9valuation- src/strategies/Type_Select.js" showLineNumbers',title:'"Code',":":!0,fonction:!0,"d'\xe9valuation-":!0,'src/strategies/Type_Select.js"':!0,showLineNumbers:!0},"const evaluate() {\n    // r\xe9cup\xe9rer les r\xe9ponses choisies par l'utilisateur sous forme de nodes html\n    const activeResponses = document.getElementsByClassName(\"activeChoice\");\n    // les transformer en tableau\n    let array = [...activeResponses];\n    // ce tableau contiendra les r\xe9ponses choisies par l'utilisateur\n    let arr = [];\n    // ce tableau contiendra les r\xe9ponses justes\n    let responses = [];\n    /**\n     * pour chaque \xe9l\xe9ment html activeChoice, on r\xe9cup\xe8re la valeur qu'il contient\n     * et on la stocke dans le tableau arr\n     *    si cela concerne une carte on r\xe9cup\xe8re la valeur de l'attribut proposition\n     *    sinon on r\xe9cup\xe8re le textContent directement.\n     */\n    array.map((item) => {\n        if (item.classList.contains(\"flipper__container--back\")) {\n            arr.push(item.attributes.proposition.value);\n        } else {\n            arr.push(item.textContent);\n        }\n    });\n    // pour chaque r\xe9ponse on stocke le libell\xe9 dans un autre tableau.\n    reponses.map((item) => {\n        responses.push(item.libelle);\n    });\n    /**\n     * si le nombre de r\xe9ponses n'est pas \xe9gale au nnombre de r\xe9ponses juste l'utilisateur a \xe9chou\xe9 \xe0 l'exercice\n     * sinon si le tableau de r\xe9ponses juste inclus les r\xe9ponses du tableau des r\xe9ponses choisi, on valide la question\n     */\n    if (responses.length !== arr.length) {\n        setCorrection(true);\n        return false;\n    } else if (responses.every((item) => arr.includes(item))) {\n        setCorrection(true);\n        setNoter(true);\n        return true;\n    } else {\n        setCorrection(true);\n        return false;\n    }\n}\n")),(0,r.kt)("h3",{id:"2-exercice-de-type--drag-and-drop-"},"2. Exercice de type \xab drag and drop \xbb"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",1:!0,className:"language-js",metastring:'title="Code 1 : proposition de type drag and drop - src/Components/atoms/proposition/Proposition.js"',title:'"Code',":":!0,proposition:!0,de:!0,type:!0,drag:!0,and:!0,drop:!0,"-":!0,'src/Components/atoms/proposition/Proposition.js"':!0},'    return (\n        <div\n            id={`proposition__container${props.id}`}\n            className={`proposition__container`}\n            draggable="true"\n            onDragStart={(e) => drag(e)}\n        >\n            <h2 className={`reponse__item ${props.class}`}>\n                <strong>{props.proposition}</strong>\n            </h2>\n        </div>\n    )\n')),(0,r.kt)("p",null,"Il faut tout d\u2019abord permettre de glisser d\xe9poser dans les deux zones (zone des r\xe9ponses possibles et la zone de r\xe9ponses), donc on rend l\u2019\xe9l\xe9ment glissable avec\n",(0,r.kt)("inlineCode",{parentName:"p"},'draggable="true"')," (code 1)."),(0,r.kt)("p",null,"On a besoin maintenant d\u2019une fonction ",(0,r.kt)("strong",{parentName:"p"},"drag")," (codes 1 et 2) de glissement qui permettra d\u2019enregistrer l\u2019\xe9l\xe9ment glissable dans un \xe9v\xe8nement."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",2:!0,className:"language-js",metastring:'title="Code 2 : fonction permettant de glisser un \xe9l\xe9ment - src/js/choixController.js"',title:'"Code',":":!0,fonction:!0,permettant:!0,de:!0,glisser:!0,un:!0,"\xe9l\xe9ment":!0,"-":!0,'src/js/choixController.js"':!0},'export const drag = (ev) => {\n    ev.dataTransfer.setData("text", ev.target.id);\n}\n')),(0,r.kt)("p",null,"On peut maintenant d\xe9finir la m\xe9thode ",(0,r.kt)("strong",{parentName:"p"},"drop")," (code 3) qui permettra de d\xe9poser l\u2019\xe9l\xe9ment \xe0 la position souhait\xe9."),(0,r.kt)("p",null,"Comme vous pouvez le remarquer, la chaine ",(0,r.kt)("strong",{parentName:"p"},"\xab activeChoice \xbb")," est utilis\xe9 ici pour identifier les r\xe9ponses dans la zone de r\xe9ponses."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",3:!0,className:"language-js",metastring:'title="Code 3 : fonction qui permet de d\xe9poser un \xe9l\xe9ment - src/js/choixController.js"',title:'"Code',":":!0,fonction:!0,qui:!0,permet:!0,de:!0,"d\xe9poser":!0,un:!0,"\xe9l\xe9ment":!0,"-":!0,'src/js/choixController.js"':!0},'export const drop = (ev) => {\n    ev.preventDefault();\n\n    //on r\xe9cup\xe8re l\'\xe9l\xe9ment gliss\xe9 \xe0 partir de l\'\xe9v\xe8nement\n    var data = ev.dataTransfer.getData("text");\n    var element = document.getElementById(data);\n    var childElement = element.querySelector(".reponse__item");\n\n    /**\n     * si cet \xe9l\xe9ment est ajout\xe9 \xe0 la zone de r\xe9ponses alors on ajoute la cha\xeene activeChoice\n     * \xe0 la liste des className dans le cas contraire en enl\xe8ve cette cha\xeene de sa liste de className\n     */\n    if (ev.target.classList.contains("reponses__zone")) {\n        childElement.classList.add("activeProposition");\n        childElement.classList.add("activeChoice");\n    } else if (ev.target.classList.contains("choice__container")) {\n        childElement.classList.remove("activeProposition");\n        childElement.classList.remove("activeChoice");\n    }\n\n    /**\n     * on positionne l\'\xe9l\xe9ment \xe0 l\'endroit o\xf9 il \xe9tait d\xe9pos\xe9\n     */\n    element.style.position = "absolute";\n    element.style.top = `${ev.clientY - (window.screen.height * 10) / 100}px`;\n    element.style.left = `${ev.clientX}px`;\n\n    ev.target.appendChild(element);\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="src/strategies/Type_Dnd.js"',title:'"src/strategies/Type_Dnd.js"'},'    <div\n        className="exercice__zone"\n        onDrop={(e) => drop(e)}\n        onDragOver={(e) => allowDrop(e)}\n    >\n        <div className={className}>\n            {this.state.items\n                ? this.state.items.map((s, i) => {\n                    return (\n                        <div className="fixed__box" key={i}>\n                            <Proposition\n                                key={s.id}\n                                id={s.id}\n                                proposition={s.libelle}\n                                type={this.state.type}\n                                index={i}\n                            />\n                        </div>\n                    );\n                })\n                : null}\n        </div>\n        <div\n            className="reponses__zone"\n            onDrop={(e) => drop(e)}\n            onDragOver={(e) => allowDrop(e)}\n        >\n            {this.state.selected\n                ? this.state.selected.map((s, i) => {\n                    return (\n                    <Proposition\n                        key={s.id}\n                        id={s.id}\n                        proposition={s.libelle}\n                        type={this.state.type}\n                        index={i}\n                        class="activeChoice activeProposition"\n                    />\n                    );\n                })\n                : null}\n            </div>\n        </div>\n')),(0,r.kt)("p",null,"L\u2019\xe9tat ",(0,r.kt)("strong",{parentName:"p"},"state")," est un objet qui contient deux listes : une liste items, qui correspond aux \xe9l\xe9ments non s\xe9lectionn\xe9s et une deuxi\xe8me liste ",(0,r.kt)("strong",{parentName:"p"},"selected")," qui\ncorrespond aux \xe9l\xe9ments s\xe9lectionn\xe9s."),(0,r.kt)("p",null,"Le fait de glisser une r\xe9ponse possible vers la zone de r\xe9ponses ajoute la chaine ",(0,r.kt)("strong",{parentName:"p"},"\xab activeChoice \xbb")," \xe0 la liste des ",(0,r.kt)("inlineCode",{parentName:"p"},"classeName")," du bouton, ce qui permet de\nr\xe9cup\xe9rer les \xe9l\xe9ments qui contient cette chaine au moment de l\u2019\xe9valuation et de les comparer avec la liste des r\xe9ponses juste."),(0,r.kt)("h3",{id:"3-exercice-de-type--memory-"},"3. Exercice de type \xab Memory \xbb"),(0,r.kt)("p",null,"Le jeu se compose de paires de cartes portant des illustrations identiques. L\u2019\xe9l\xe8ve retourne deux cartes de son choix. S'il d\xe9couvre deux cartes identiques, elles\nrestent visibles. Si les cartes ne sont pas identiques, elles sont retourn\xe9es faces cach\xe9es."),(0,r.kt)("p",null,"Le jeu se termine quand toutes les paires de cartes ont \xe9t\xe9 d\xe9couvertes."),(0,r.kt)("p",null,"Quand l\u2019\xe9l\xe8ve d\xe9couvre deux cartes identiques, la chaine ",(0,r.kt)("strong",{parentName:"p"},"\xab activeChoice \xbb")," est ajout\xe9e \xe0 la liste des ",(0,r.kt)("inlineCode",{parentName:"p"},"className")," de la premi\xe8re carte, ce qui permettra de les\nr\xe9cup\xe9rer par la suite pour appliquer la m\xeame m\xe9thode d\u2019\xe9valuation que les autres types d\u2019exercices."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fonctionnement")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",1:!0,className:"language-js",metastring:'title="Code 1 : rendu visuel de la carte - src/Components/atoms/proposition/Proposition.js"',title:'"Code',":":!0,rendu:!0,visuel:!0,de:!0,la:!0,carte:!0,"-":!0,'src/Components/atoms/proposition/Proposition.js"':!0},"    return (\n        <div\n            className={`proposition__container ${props.class}`}\n            onClick={props.flipCard}\n        >\n            <h1>{props.proposition}</h1>\n        </div>\n    );\n")),(0,r.kt)("p",null,"En cliquant sur une carte, la fonction ",(0,r.kt)("strong",{parentName:"p"},"\xab flipCard \xbb")," est ex\xe9cut\xe9e qui stocke une r\xe9f\xe9rence vers la premi\xe8re carte dans un \xe9tat global (",(0,r.kt)("strong",{parentName:"p"},"Context API"),"), si la\npremi\xe8re carte est d\xe9j\xe0 choisie alors la fonction ",(0,r.kt)("strong",{parentName:"p"},"\xab flipCard \xbb")," stocke la deuxi\xe8me carte dans un autre \xe9tat global."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",2:!0,className:"language-js",metastring:'title="Code 2 - src/Components/atoms/card/Card.js"',title:'"Code',"-":!0,'src/Components/atoms/card/Card.js"':!0},"    const flipCard = (e) => {\n        let targetCard = e.target;\n\n        if (!e.target.attributes.id) targetCard = e.target.parentNode;\n\n        if (isFlipped) {\n            if (visibleCards < 2) {\n                if (!firstChosenCard) {\n                    setFirstChosenCard(targetCard);\n                } else if (!secondChosenCard) {\n                    setSecondChosenCard(targetCard);\n                }\n            }\n        }\n    };\n")),(0,r.kt)("p",null,"Quand l\u2019un de ces deux \xe9tats globaux est initialis\xe9, la fonction ",(0,r.kt)("strong",{parentName:"p"},"useEffect")," est d\xe9clench\xe9e, ce qui permettra d\u2019ex\xe9cuter la fonction ",(0,r.kt)("strong",{parentName:"p"},"\xab showCard \xbb"),", cette\nderni\xe8re change l\u2019\xe9tat de la carte \xe0 ",(0,r.kt)("strong",{parentName:"p"},"\xab tourn\xe9e \xbb")," et incr\xe9mente la valeur de l\u2019\xe9tat ",(0,r.kt)("strong",{parentName:"p"},"\xab cardFlipped \xbb")," qui repr\xe9sente le nombre de cartes tourn\xe9es."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",3:!0,className:"language-js",metastring:'title="Code 3 - src/Components/atoms/card/Card.js"',title:'"Code',"-":!0,'src/Components/atoms/card/Card.js"':!0},"    /**\n    * *Si la premi\xe8re carte est choisie ce code est ex\xe9cut\xe9\n    * *pour afficher cette derni\xe8re.\n    */\n    useEffect(() => {\n        if (firstChosenCard && props.id === firstChosenCard.attributes.id.value) {\n            showCard();\n        }\n    }, [firstChosenCard]);\n    /**\n     * *Si la deuxi\xe8me carte est choisi ce bout de code est ex\xe9cut\xe9\n     * *pour afficher cette derni\xe8re.\n     */\n    useEffect(() => {\n        if (secondChosenCard && props.id === secondChosenCard.attributes.id.value) {\n            showCard();\n        }\n    }, [secondChosenCard]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",4:!0,className:"language-js",metastring:'title="Code 4 - src/Components/atoms/card/Card.js"',title:'"Code',"-":!0,'src/Components/atoms/card/Card.js"':!0},"    const showCard = () => {\n        setIsFlipped(false);\n        setVisibleCards((cardFlipped) => cardFlipped + 1);\n    };\n")),(0,r.kt)("p",null,"Quand l\u2019\xe9tat ",(0,r.kt)("strong",{parentName:"p"},"cardFlipped")," atteint la valeur 2, une autre fonction ",(0,r.kt)("strong",{parentName:"p"},"useEffect")," est d\xe9clench\xe9e, cette derni\xe8re ex\xe9cute la fonction ",(0,r.kt)("strong",{parentName:"p"},"\xab evaluate \xbb")," qui change\nla valeur de l\u2019\xe9tat ",(0,r.kt)("strong",{parentName:"p"},"\xab Match \xbb"),", donc cet \xe9tat prend la valeur ",(0,r.kt)("strong",{parentName:"p"},"\xab no match \xbb")," quand les cartes ne sont pas identiques, sinon prend la valeur ",(0,r.kt)("strong",{parentName:"p"},"\xab match \xbb"),",\ndans le premier cas un ",(0,r.kt)("strong",{parentName:"p"},"setTimout")," est mis en place et les cartes sont retourn\xe9es faces cach\xe9es, dans le cas de ",(0,r.kt)("strong",{parentName:"p"},"\xab match \xbb"),", les deux cartes restent visibles."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",5:!0,className:"language-js",metastring:'title="Code 5 - src/Components/atoms/card/Card.js"',title:'"Code',"-":!0,'src/Components/atoms/card/Card.js"':!0},"    const showCard = () => {\n        setIsFlipped(false);\n        setVisibleCards((cardFlipped) => cardFlipped + 1);\n    };\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",6:!0,className:"language-js",metastring:'title="Code 6 - src/Components/atoms/card/Card.js"',title:'"Code',"-":!0,'src/Components/atoms/card/Card.js"':!0},"    useEffect(() => {\n        if (cardFlipped === 2) evaluate();\n    }, [cardFlipped]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",7:!0,className:"language-js",metastring:'title="Code 7 - src/Components/atoms/card/Card.js"',title:'"Code',"-":!0,'src/Components/atoms/card/Card.js"':!0},'    const evaluate = () => {\n        if (secondChosenCard) {\n            if (\n                firstChosenCard.attributes.proposition.value.localeCompare(\n                    secondChosenCard.attributes.proposition.value\n                ) === 0\n            ) {\n                setMatch("match");\n                firstChosenCard.classList.add("activeChoice");\n            } else {\n                setMatch("no match");\n            }\n        }\n    };\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",8:!0,className:"language-js",metastring:'title="Code 8 - src/Components/atoms/card/Card.js"',title:'"Code',"-":!0,'src/Components/atoms/card/Card.js"':!0},'    useEffect(() => {\n        if (match === "match") {\n            setFirstChosenCard(null);\n            setSecondChosenCard(null);\n            setCardFlipped(0);\n            setMatch("");\n        } else if (match === "no match") {\n            setTimeout(hideCard, 2000);\n            setFirstChosenCard(null);\n            setSecondChosenCard(null);\n            setMatch("");\n        }\n    }, [match]);\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PS :")," la m\xeame fonction g\xe9n\xe9rique est utilis\xe9e pour \xe9valuer les diff\xe9rents types d\u2019exercices, la m\xe9thode consiste \xe0 ajouter la chaine de caract\xe8re ",(0,r.kt)("strong",{parentName:"p"},"\xab activeChoice \xbb"),"\n\xe0 la liste des ",(0,r.kt)("inlineCode",{parentName:"p"},"className")," de la r\xe9ponse choisie pour ensuite les r\xe9cup\xe9rer et les comparer avec la liste des r\xe9ponses juste. La m\xe9thode est nomm\xe9e ",(0,r.kt)("strong",{parentName:"p"},"\xab evaluate \xbb"),"\net fait partie du composant ",(0,r.kt)("strong",{parentName:"p"},"\xab Step \xbb")," dans le fichier ",(0,r.kt)("inlineCode",{parentName:"p"},"Step.js"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Pseudo-code")),(0,r.kt)("figure",null,(0,r.kt)("img",{src:"https://monwikidevweb.la-loutre.fr/img/docs/Alecol/assets/CD-TE03.png",alt:"Algorithme 1 : Jeu de type Memory"}),(0,r.kt)("figcaption",null)),(0,r.kt)("h3",{id:"4-exercice-de-type--link-"},"4. Exercice de type \xab Link \xbb"),(0,r.kt)("p",null,"L\u2019exercice de type link permet de lier les \xe9l\xe9ments qui se correspondent, sachant que les \xe9l\xe9ments \xe0 gauche sont des textes et les \xe9l\xe9ments \xe0 droite sont des images."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",1:!0,className:"language-js",metastring:'title="Code 1 - src/Components/atoms/proposition/Proposition.js"',title:'"Code',"-":!0,'src/Components/atoms/proposition/Proposition.js"':!0},'    else if (props.type === "Type_Link") {\n        if (props.choice) {\n            return (\n                <div\n                    id={`proposition__container${props.id}`}\n                    className={`proposition__container`}\n                    onClick={(e) => props.firstClickHandler(e)}\n                >\n                    <h2 className={`reponse__item ${props.class}`}>\n                        <strong data-id={props.id}>{props.proposition}</strong>\n                    </h2>\n                </div>\n            );\n        } else {\n            return (\n                <div\n                    id={`proposition__container${props.id}`}\n                    className={`proposition__container proposition__image`}\n                    onClick={(e) => props.secondClickHandler(e)}\n                >\n                    <img src={props.proposition} alt={props.nom} />\n                </div>\n            );\n        }\n    }\n')),(0,r.kt)("p",null,"La m\xe9thode ",(0,r.kt)("strong",{parentName:"p"},"firstClickHandler")," sert \xe0 r\xe9cup\xe9rer le texte choisi et la m\xe9thode ",(0,r.kt)("strong",{parentName:"p"},"secondClickHandler")," sert \xe0 r\xe9cup\xe9rer l\u2019image choisi correspondante."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",2:!0,className:"language-js",metastring:'title="Code 2 - src/Components/molecules/step/Step.js"',title:'"Code',"-":!0,'src/Components/molecules/step/Step.js"':!0},"    /**\n     *  * initialise le texte choisi dans le cas d'exercice link\n     *\n     * @function firstClickHandler\n     * @param {Event} e click event\n     */\n\n    const firstClickHandler = (e) => {\n        console.log(e.target);\n        setChoice(e.target);\n    };\n\n    /**\n     *  * initialise l'image choisi dans le cas d'exercice link\n     *\n     * @function secondClickHandler\n     * @param {Event} e click event\n     */\n\n    const secondClickHandler = (e) => {\n        console.log(e.target);\n        setImage(e.target);\n    };\n")),(0,r.kt)("p",null,"D\xe8s que les deux \xe9l\xe9ments sont choisis, on cr\xe9e une fl\xe8che du premier texte choisi vers l\u2019image correspondante avec la biblioth\xe8que ",(0,r.kt)("strong",{parentName:"p"},"React LeaderLine")," et on\nr\xe9initialise les deux \xe9tats correspondant au texte et \xe0 l\u2019image s\xe9lectionn\xe9s."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",3:!0,className:"language-js",metastring:'title="Code 3 - src/Components/molecules/step/Step.js"',title:'"Code',"-":!0,'src/Components/molecules/step/Step.js"':!0},"    /**\n     * * Au moment o\xf9 le choix et l'image sont d\xe9finis on dessine la ligne entre ces deux derniers\n     */\n\n    useEffect(() => {\n        if (choice && image) {\n            new LeaderLine(choice, image);\n            setImage(null);\n            setChoice(null);\n        }\n    }, [choice, image]);\n")),(0,r.kt)("h3",{id:"5-exercice-de-type--fill--ou--phrases-\xe0-trous-"},"5. Exercice de type \xab Fill \xbb ou \xab phrases \xe0 trous \xbb"),(0,r.kt)("p",null,"Cet exercice concerne les phrases \xe0 trous mais aussi le calcul pos\xe9, l\u2019id\xe9e est d\u2019avoir des cases vides \xe0 certaines positions, ces positions sont stock\xe9es dans la\ntable ",(0,r.kt)("strong",{parentName:"p"},"reponse")," avec les r\xe9ponses justes."),(0,r.kt)("p",null,"Pour une phrase \xe0 trous, on sp\xe9cifie les r\xe9ponses justes et ses positions de cette fa\xe7on dans la base de donn\xe9es :"),(0,r.kt)("figure",null,(0,r.kt)("img",{src:"https://monwikidevweb.la-loutre.fr/img/docs/Alecol/assets/CD-TE05a.png",alt:""}),(0,r.kt)("figcaption",null)),(0,r.kt)("p",null,"En r\xe9cup\xe9rant ces r\xe9ponses, on peut savoir o\xf9 ins\xe9rer les cases vides. Le code ci-apr\xe8s permet de transformer la phrase en question \xe0 un tableau de mots, d\u2019ins\xe9rer\nla case vide \xe0 la bonne position et de reconstruire la phrase."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",1:!0,className:"language-js",metastring:'title="Code 1 - src/Components/molecules/step/Step.js"',title:'"Code',"-":!0,'src/Components/molecules/step/Step.js"':!0},'    if (done) {\n        if (props.questionType === "texte") {\n            reponses.forEach((reponse, i) => {\n                array.splice(\n                    reponse.nom,\n                    0,\n                    <div\n                        id={`vide ${reponse.nom}`}\n                        className="vide"\n                        onDragOver={(e) => allowDrop(e)}\n                        onDrop={(e) => fillDrop(e)}\n                    ></div>\n                );\n            });\n\n            setDone(false);\n            setLibelle(array.reduce((prev, curr) => [prev, " ", curr]));\n            setConsigne(props.consigne);\n            setLibelle((libelle) => (\n                <div className="libelle__border">{libelle}</div>\n            ));\n        }\n    }\n')),(0,r.kt)("p",null,"L\u2019\xe9valuation se fait en v\xe9rifiant la position du texte gliss\xe9 mais aussi en v\xe9rifiant l\u2019intitul\xe9 du texte."),(0,r.kt)("p",null,"Concernant le calcul pos\xe9, une liste de r\xe9ponses correspondant \xe0 des identifiants d\u2019images est stock\xe9e dans la table ",(0,r.kt)("strong",{parentName:"p"},"reponse")," de la base de donn\xe9es, ces images\nrepr\xe9sentent les chiffres de 0 \xe0 9 avec lesquelles l\u2019enfant peut former un nombre."),(0,r.kt)("figure",null,(0,r.kt)("img",{src:"https://monwikidevweb.la-loutre.fr/img/docs/Alecol/assets/CD-TE05b.png",alt:""}),(0,r.kt)("figcaption",null)),(0,r.kt)("p",null,"Le code suivant initialise les cases vides qu\u2019on va ajouter par la suite \xe0 l\u2019ensemble du calcul pos\xe9."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",2:!0,className:"language-js",metastring:'title="Code 2 - src/Components/molecules/step/Step.js"',title:'"Code',"-":!0,'src/Components/molecules/step/Step.js"':!0},'    else if (props.questionType !== "texte") {\n        reponses.forEach((reponse, i) => {\n            setVides((vides) => [\n                ...vides,\n                <div\n                    id={`vide ${i}`}\n                    className="vide empty__box"\n                    onDragOver={(e) => allowDrop(e)}\n                    onDrop={(e) => imageDrop(e)}\n                ></div>,\n            ]);\n        });\n        setDone(false);\n    }\n')),(0,r.kt)("p",null,"Le code suivant analyse le texte et r\xe9cup\xe8re tout d\u2019abord le signe de l\u2019op\xe9ration, on r\xe9cup\xe8re par la suite les deux nombres de l\u2019op\xe9ration et on initialise le\ntexte de l\u2019op\xe9ration tout en ins\xe9rant les cases vides \xe0 la fin."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",3:!0,className:"language-js",metastring:'title="Code 3 - src/Components/molecules/step/Step.js"',title:'"Code',"-":!0,'src/Components/molecules/step/Step.js"':!0},'    useEffect(() => {\n        if (props.type === "Type_Fill" && props.questionType !== "texte") {\n            setConsigne(props.consigne);\n            let characters = [...props.libelle];\n            let sign = "";\n\n            characters.forEach((char, i) => {\n                if (isNaN(char)) {\n                    sign = char;\n                    return;\n                }\n            });\n\n            let line1 = props.libelle.substring(0, props.libelle.indexOf(sign));\n            let line2 = props.libelle.substring(\n                props.libelle.indexOf(sign) + 1,\n                props.libelle.length\n            );\n\n            setLibelle((libelle) => (\n                <div className="addition__posee">\n                    <img src={blackboard} alt="blackboard" />\n                    <div className="first__number">{line1}</div>\n                    <div className="second__row--container">\n                        <div className="sign">{sign}</div>\n                        <div className="second__number">{line2}</div>\n                    </div>\n                    <div className="vides__boxes">{vides}</div>\n                </div>\n            ));\n        }\n    })\n')),(0,r.kt)("p",null,"L\u2019\xe9valuation se fait en v\xe9rifiant la position de l\u2019image gliss\xe9e mais aussi en v\xe9rifiant si son identifiant correspond au texte enregistr\xe9 dans la base de donn\xe9es\ncomme le montre le code ci-dessous."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",4:!0,className:"language-js",metastring:'title="Code 4 - src/strategies/Type_Fill.js"',title:'"Code',"-":!0,'src/strategies/Type_Fill.js"':!0},'    else if (props.type === "Type_Fill" && props.questionType !== "texte") {\n        let b = true;\n        vides.forEach((vide, i) => {\n            if (\n                document\n                    .getElementById(`vide ${i}`)\n                    .id.slice(5, getElementById(`vide ${i}`).id.length) !==\n                        reponses[i].libelle ||\n                document\n                    .getElementById(`vide ${i}`).firstChild.id !==\n                        reponses[i].libelle\n            ) {\n                b = false;\n                return;\n            }\n        });\n        return b;\n    }\n')),(0,r.kt)("h3",{id:"6-exercice-de-type--s\xe9riation-"},"6. Exercice de type \xab S\xe9riation \xbb"),(0,r.kt)("p",null,"Ce type d\u2019exercice permet de ranger des \xe9l\xe9ments suivant la taille, le poids, la valeur\u2026, pour le faire fonctionner on doit stocker les noms des images dans la\ntable de choix, ces images doivent \xeatre stock\xe9es dans le dossier ",(0,r.kt)("inlineCode",{parentName:"p"},"src/Data/Images"),"."),(0,r.kt)("figure",null,(0,r.kt)("img",{src:"https://monwikidevweb.la-loutre.fr/img/docs/Alecol/assets/CD-TE06a.png",alt:""}),(0,r.kt)("figcaption",null)),(0,r.kt)("p",null,"La prochaine \xe9tape est de stocker l\u2019ordre et les identifiants des images dans la table r\xe9ponse."),(0,r.kt)("figure",null,(0,r.kt)("img",{src:"https://monwikidevweb.la-loutre.fr/img/docs/Alecol/assets/CD-TE06b.png",alt:""}),(0,r.kt)("figcaption",null)),(0,r.kt)("p",null,"Pour pouvoir afficher l\u2019image il faut lire le nom de l\u2019image \xe0 partir de la base de donn\xe9es et l\u2019ins\xe9rer par la suite dans le dom, donc il faut appeler la m\xe9thode\n",(0,r.kt)("em",{parentName:"p"},"require")," dans la m\xe9thode ",(0,r.kt)("em",{parentName:"p"},"map"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",1:!0,className:"language-js",metastring:'title="Code 1 - src/strategies/Type_Seriation.js"',title:'"Code',"-":!0,'src/strategies/Type_Seriation.js"':!0},'    render() {\n        return (\n            <div className="seriation__container">\n                {this.props.choices.map((choice, i) => {\n                    const image = require(`../Data/Images/${choice.libelle}`);\n                    return (\n                        <div\n                            id={`object__container ${i}`}\n                            className="object__container"\n                            onDrop={(e) => seriationDrop(e)}\n                            onDragOver={(e) => allowDrop(e)}\n                        >\n                            <img\n                                id={`image__seriation ${choice.id}`}\n                                draggable="true"\n                                onDragStart={(e) => drag(e)}\n                                src={image.default}\n                                alt="objet"\n                            />\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n')),(0,r.kt)("p",null,"La fonction ",(0,r.kt)("strong",{parentName:"p"},"seriationDrop")," permet de r\xe9cup\xe9rer l\u2019image gliss\xe9e ainsi que l\u2019image de destination, on r\xe9cup\xe8re par la suite le conteneur de chacune des images,\net pour chaque conteneur on d\xe9finit l\u2019image oppos\xe9e comme enfant du conteneur."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",2:!0,className:"language-js",metastring:'title="Code 2 - src/js/choixController.js"',title:'"Code',"-":!0,'src/js/choixController.js"':!0},"export const seriationDrop = (ev) => {\n    ev.preventDefault();\n\n    //on r\xe9cup\xe8re l'\xe9l\xe9ment gliss\xe9e \xe0 partir de l'\xe9v\xe8nement\n    var data = ev.dataTransfer.getData(\"text\");\n    var image1 = document.getElementById(data);\n    var image2 = ev.target;\n    var container1 = image1.parentNode;\n    var container2 = image2.parentNode;\n\n    container1.appendChild(image2);\n    container2.appendChild(image1);\n};\n")),(0,r.kt)("p",null,"Pour \xe9valuer le travail de l\u2019enfant il faut v\xe9rifier tout d\u2019abord si les positions des images sont bonnes en comparant avec les valeurs dans la table ",(0,r.kt)("strong",{parentName:"p"},"reponse"),"."),(0,r.kt)("p",null,"On v\xe9rifie par la suite si l\u2019identifiant de chaque image est \xe9gal \xe0 la valeur stock\xe9e dans la table ",(0,r.kt)("strong",{parentName:"p"},"reponse"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",3:!0,className:"language-js",metastring:'title="Code 3 - src/strategies/Type_Seriation.js"',title:'"Code',"-":!0,'src/strategies/Type_Seriation.js"':!0},'    evaluate() {\n        const containers = document.getElementsByClassName("object__container");\n\n        const arrayOfContainers = [...containers];\n        let b = true;\n\n        arrayOfContainers.map((container, i) => {\n            let image = container.firstChild;\n\n            if (container.id !== `object__container ${this.props.choices[i].nom}`) {\n                b = false;\n                return;\n            }\n            if (image.id !== `image__seriation ${this.props.choices[i].libelle}`) {\n                b = false;\n                return;\n            }\n            return b;\n        });\n        return b;\n    }\n')),(0,r.kt)("h2",{id:"le-design-pattern-strategy"},"Le design pattern Strategy"),(0,r.kt)("p",null,"Au tout d\xe9but du projet, un ",(0,r.kt)("em",{parentName:"p"},"switch-case")," permettait de d\xe9finir l\u2019affichage selon le type de l\u2019exercice et \xe0 chaque fois qu\u2019on voulait ajouter un autre type\nd\u2019exercice, le code du ",(0,r.kt)("em",{parentName:"p"},"switch-case")," devenait de plus en plus long."),(0,r.kt)("p",null,"Cette impl\xe9mentation ne respectait pas le principe ",(0,r.kt)("em",{parentName:"p"},"open/closed"),", ce qui rendait le code de moins en moins maintenable."),(0,r.kt)("p",null,"La solution \xe9tait d\u2019impl\xe9menter le ",(0,r.kt)("em",{parentName:"p"},"design pattern Strategy")," qui prend en compte le type de l\u2019exercice et d\xe9finit le type d\u2019affichage lors de l\u2019ex\xe9cution."),(0,r.kt)("p",null,"L\u2019impl\xe9mentation suivante repr\xe9sente la fameuse classe ",(0,r.kt)("strong",{parentName:"p"},"Context")," du ",(0,r.kt)("em",{parentName:"p"},"design pattern Strategy"),", c\u2019est elle qui permet de d\xe9finir la strat\xe9gie au moment de\nl\u2019ex\xe9cution et donc d\u2019appeler la m\xe9thode ",(0,r.kt)("em",{parentName:"p"},"render")," ad\xe9quate."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",1:!0,className:"language-js",metastring:'title="Code 1 - src/strategies/SelectionTypeExercice.js"',title:'"Code',"-":!0,'src/strategies/SelectionTypeExercice.js"':!0},"class SelectionTypeExercice {\n    constructor() {\n        this._strategy = null;\n    }\n    set strategy(strategy) {\n        this._strategy = strategy;\n    }\n\n    get strategy() {\n        return this._strategy;\n    }\n\n    render() {\n        return this._strategy.render();\n    }\n}\n\nexport default SelectionTypeExercice;\n")),(0,r.kt)("p",null,"L\u2019image suivante montre les diff\xe9rentes strat\xe9gies qui repr\xe9sentent chacune un type d\u2019exercice."),(0,r.kt)("figure",null,(0,r.kt)("img",{src:"https://monwikidevweb.la-loutre.fr/img/docs/Alecol/assets/CD-DPS01.png",alt:""}),(0,r.kt)("figcaption",null)),(0,r.kt)("p",null,"Chaque strat\xe9gie impl\xe9mente la m\xe9thode ",(0,r.kt)("strong",{parentName:"p"},"render")," qui est appel\xe9e au moment de l\u2019ex\xe9cution."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",2:!0,className:"language-js",metastring:'title="Code 2 - src/strategies/Type_Flip.js"',title:'"Code',"-":!0,'src/strategies/Type_Flip.js"':!0},'class Flip extends React.Component {\n    ...\n    render() {\n        return (\n            <div key={this.props.key} className={"choice__container flip__container"}>\n            {this.props.choices.map((choice, i) => {\n                return (\n                    <Card\n                        id={`choice${i}${this.props.step}`}\n                        key={`choice${i}${this.props.step}`}\n                        libelle={choice.libelle}\n                        type={this.props.type}\n                    />\n                );\n            })}\n\n            {this.props.reponses.map((reponse, i) => {\n                return (\n                    <Card\n                        id={`response${i}${this.props.step}`}\n                        key={`response${i}${this.props.step}`}\n                        libelle={reponse.choice}\n...\n')),(0,r.kt)("p",null,"Pour appliquer ce ",(0,r.kt)("em",{parentName:"p"},"design pattern"),", on initialise tout d\u2019abord le ",(0,r.kt)("em",{parentName:"p"},"Context")," ",(0,r.kt)("strong",{parentName:"p"},"TypeExerciceManager"),", et selon le type on r\xe9cup\xe8re la strat\xe9gie. Il suffit apr\xe8s\nd\u2019affecter cette derni\xe8re au ",(0,r.kt)("em",{parentName:"p"},"context")," et d\u2019appeler la m\xe9thode ",(0,r.kt)("em",{parentName:"p"},"render")," du context."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",3:!0,className:"language-js",metastring:'title="Code 3 - src/Components/molecules/step/Step.js"',title:'"Code',"-":!0,'src/Components/molecules/step/Step.js"':!0},"    const [TypeExerciceManager, setTypeExerciceManager] = useState(\n        new SelectionTypeExercice()\n    );\n\n    useEffect(() => {\n        if (props.type) {\n            const Exercice = new Strategies[`${props.type}`]({\n                ...props,\n                firstClickHandler: firstClickHandler,\n                secondClickHandler: secondClickHandler,\n            });\n\n            TypeExerciceManager.strategy = Exercice;\n        }\n    }, [props]);\n\n    if (TypeExerciceManager.strategy) {\n        return TypeExerciceManager.render();\n    } else {\n        return null;\n    }\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PS :")," il faut que le type d\u2019exercice dans la base corresponde au nom de la strat\xe9gie cr\xe9\xe9e."),(0,r.kt)("figure",null,(0,r.kt)("img",{src:"https://monwikidevweb.la-loutre.fr/img/docs/Alecol/assets/CD-DPS02.png",alt:""}),(0,r.kt)("figcaption",null)))}d.isMDXComponent=!0}}]);