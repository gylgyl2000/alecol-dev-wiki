"use strict";(self.webpackChunkalecol_dev_wiki=self.webpackChunkalecol_dev_wiki||[]).push([[2537],{3905:(e,r,n)=>{n.d(r,{Zo:()=>p,kt:()=>m});var s=n(7294);function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);r&&(s=s.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){t(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,s,t=function(e,r){if(null==e)return{};var n,s,t={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var l=s.createContext({}),c=function(e){var r=s.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},p=function(e){var r=c(e.components);return s.createElement(l.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return s.createElement(s.Fragment,{},r)}},d=s.forwardRef((function(e,r){var n=e.components,t=e.mdxType,o=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=c(n),m=t,v=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?s.createElement(v,i(i({ref:r},p),{},{components:n})):s.createElement(v,i({ref:r},p))}));function m(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var o=n.length,i=new Array(o);i[0]=d;var a={};for(var l in r)hasOwnProperty.call(r,l)&&(a[l]=r[l]);a.originalType=e,a.mdxType="string"==typeof e?e:t,i[1]=a;for(var c=2;c<o;c++)i[c]=n[c];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7379:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var s=n(3117),t=(n(7294),n(3905));const o={},i="R\xe9ponses paires",a={unversionedId:"Backend_Serveur/Sources/MPD_exercices/ReponsesPaires",id:"Backend_Serveur/Sources/MPD_exercices/ReponsesPaires",title:"R\xe9ponses paires",description:"Service",source:"@site/docs/2-Backend_Serveur/Sources/3-MPD_exercices/11-ReponsesPaires.mdx",sourceDirName:"2-Backend_Serveur/Sources/3-MPD_exercices",slug:"/Backend_Serveur/Sources/MPD_exercices/ReponsesPaires",permalink:"/alecol-dev-wiki/docs/Backend_Serveur/Sources/MPD_exercices/ReponsesPaires",draft:!1,editUrl:"https://github.com/gylgyl2000/alecol-dev-wiki/docs/2-Backend_Serveur/Sources/3-MPD_exercices/11-ReponsesPaires.mdx",tags:[],version:"current",sidebarPosition:11,frontMatter:{},sidebar:"BackendSidebar",previous:{title:"R\xe9ponses memory",permalink:"/alecol-dev-wiki/docs/Backend_Serveur/Sources/MPD_exercices/ReponsesMemory"},next:{title:"R\xe9ponses trous",permalink:"/alecol-dev-wiki/docs/Backend_Serveur/Sources/MPD_exercices/ReponsesTrous"}},l={},c=[{value:"Service",id:"service",level:2},{value:"Mod\xe8le",id:"mod\xe8le",level:2},{value:"Contr\xf4leur",id:"contr\xf4leur",level:2},{value:"Route",id:"route",level:2}],p={toc:c};function u(e){let{components:r,...n}=e;return(0,t.kt)("wrapper",(0,s.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"r\xe9ponses-paires"},"R\xe9ponses paires"),(0,t.kt)("h2",{id:"service"},"Service"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/services/alecol.reponse_paires.service.js"',title:'"./src/services/alecol.reponse_paires.service.js"'},'import http from "../http-common";\n\nclass ReponsePairesDataService {\n    getAll() {\n        return http.get("/reponsesPaires");\n    }\n\n    get(id) {\n        return http.get(`/reponsesPaires/${id}`);\n    }\n\n    findByExoId(fk_exo_id) {\n        return http.get(`/reponsesPaires?fk_exo_id=${fk_exo_id}`);\n    }\n}\n\nexport default new ReponsePairesDataService();\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/services/index.js"',title:'"./src/services/index.js"'},'const ReponsePairesService = require("./alecol.reponse_paires.service");\n...\nconst Services = {};\n...\nServices.ReponsePairesService = ReponsePairesService.default;\n...\nexport default Services;\n')),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"mod\xe8le"},"Mod\xe8le"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/models/reponse_paires.model.js"',title:'"./src/models/reponse_paires.model.js"'},'module.exports = (sequelize, Sequelize) => {\n    const Reponses_paires = sequelize.define("reponses_paires", {\n        FK_Exo_ID: {\n            type: Sequelize.STRING,\n            primaryKey: true,\n            references: {\n                model: "exercices",\n                key: "pk_exo_id",\n            },\n        },\n        Type_Rep_1: {\n            type: Sequelize.STRING,\n        },\n        FK_Rep_ID_1: {\n            type: Sequelize.STRING,\n            primaryKey: true,\n        },\n        Type_Rep_2: {\n            type: Sequelize.STRING,\n        },\n        FK_Rep_ID_2: {\n            type: Sequelize.STRING,\n            primaryKey: true,\n        },\n    });\n\n    return Reponses_paires;\n};\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/models/index.js"',title:'"./src/models/index.js"'},'...\ndb.reponse_paires = require("./reponse_paires.model")(sequelize, Sequelize);\n...\n// reponses_paires => exercices\ndb.exercices.hasMany(db.reponse_paires, { foreignKey: "FK_Exo_ID" });\ndb.reponse_paires.belongsTo(db.exercices, { foreignKey: "FK_Exo_ID" });\n...\n')),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"contr\xf4leur"},"Contr\xf4leur"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/controllers/alecol.reponse_paires.controllers.js"',title:'"./src/controllers/alecol.reponse_paires.controllers.js"'},'const db = require("../models");\nconst Reponse = db.reponse_memory;\nconst Op = db.Sequelize.Op;\n\n// R\xe9cup\xe9rer toutes les r\xe9ponses memory de la base de donn\xe9es\nconst db = require("../models");\nconst Reponse = db.reponse_paires;\nconst Op = db.Sequelize.Op;\n\n// R\xe9cup\xe9rer toutes les r\xe9ponses paires de la base de donn\xe9es\nexports.findAll = (req, res) => {\n    const exoId = req.query.fk_exo_id;\n\n    var condition = exoId ? { FK_Exo_ID: { [Op.like]: `${exoId}` } } : null;\n\n    Reponse.findAll({ where: condition })\n        .then((data) => {\n            res.send(data);\n        })\n        .catch((err) => {\n            res.status(500).send({\n                message:\n                err.message || "Une erreur s\'est produite lors de la r\xe9cup\xe9ration des r\xe9ponses paires.",\n            });\n        });\n};\n\n// Trouver une seule r\xe9ponse paires avec un identifiant\nexports.findOne = (req, res) => {\n    const id = req.params.id;\n\n    Reponse.findByPk(id)\n        .then((data) => {\n            res.send(data);\n        })\n        .catch((err) => {\n            res.status(500).send({\n                message: "Erreur lors de la r\xe9cup\xe9ration de la r\xe9ponse paires avec l\'id=" + id,\n            });\n        });\n};\n')),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"route"},"Route"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/routes/alecol.reponse_paires.routes.js"',title:'"./src/routes/alecol.reponse_paires.routes.js"'},'module.exports = (app) => {\n    const reponse_paires = require("../controllers/alecol.reponse_paires.controllers");\n\n    var router = require("express").Router();\n\n    // R\xe9cup\xe9rer toutes les r\xe9ponses paires\n    router.get("/", reponse_paires.findAll);\n\n    // R\xe9cup\xe9rer une seule r\xe9ponse paires avec id\n    router.get("/:id", reponse_paires.findOne);\n\n    app.use("/api/reponsesPaires", router);\n};\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="server.js"',title:'"server.js"'},'...\nrequire("./src/routes/alecol.reponse_paires.routes")(app);\n...\n')))}u.isMDXComponent=!0}}]);